<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[狼狼的蓝胖子]]></title>
  <subtitle><![CDATA[我只是想写点字]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://luopq.com/"/>
  <updated>2015-11-01T05:22:28.760Z</updated>
  <id>http://luopq.com/</id>
  
  <author>
    <name><![CDATA[LuoPQ]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[详解CSS display:inline-block的应用]]></title>
    <link href="http://luopq.com/2015/11/01/display-inline-block/"/>
    <id>http://luopq.com/2015/11/01/display-inline-block/</id>
    <published>2015-11-01T05:02:11.000Z</published>
    <updated>2015-11-01T05:22:28.760Z</updated>
    <content type="html"><![CDATA[<p>本文详细描述了display:inline-block的基础知识，产生的问题和解决方法以及其常见的应用场景，加深了对inline-block应用的进一步理解。</p>
<h3 id="基础知识">基础知识</h3><p>display:inline-block是什么呢？相信大家对这个属性并不陌生，根据名字inline-block我们就可以大概猜出它是结合了inline和block两者的特性于一身，简单的说：设置了inline-block属性的元素既拥有了block元素可以设置width和height的特性，又保持了inline元素不换行的特性。</p>
<p>举例说明：以前我们做横向菜单列表的时候，我们可以通过li和float:left两者来实现，现在可以通过li和display:inline-block。</p>
<blockquote>
<p>HTML代码</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            首页</span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            关于</span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            热点</span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            联系我们</span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>CSS代码：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ul</span>, <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">list-style-type</span>:<span class="value"> none</span></span>; &#125;</span></span><br><span class="line">        <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>; <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图：</p>
</blockquote>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo1.jpg" alt="inline-block基本效果"></p>
<p>可以看到li元素可以横向排列，并且可以设置width属性，大家可以复制代码自己查看效果或查看<a href="http://runjs.cn/code/2qc4sp6i" target="_blank" rel="external">Demo</a></p>
<h3 id="inline-block的问题">inline-block的问题</h3><p>观察上面的例子，细心的同学肯定会发现，每个li之间有一个小空隙，而我们的代码中并没有设置margin等相关属性，这是为什么呢？</p>
<h4 id="默认的inline元素">默认的inline元素</h4><p>首先，我们观察一下默认的inline元素的表现：</p>
<blockquote>
<p>HTML代码</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span>&gt;</span>首页<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span>&gt;</span>热点<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>CSS代码</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">a</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图</p>
</blockquote>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo2.jpg" alt="inline默认情况"></p>
<p>默认情况下，inline元素之间就有空隙出现，所以结合了inline和block属性的inline-block属性自然也有这个特点。<br>那这些空隙是什么呢，它们是空白符！</p>
<h4 id="消除空白符">消除空白符</h4><p>在浏览器中，空白符是不会被浏览器忽略的，多个连续的空白符浏览器会自动将其合并成一个。我们编写代码时写的空格，换行都会产生空白符。所以自然而然的两个元素之间会有空白符，如果将上述例子中的a标签写成一行，空白符消失，菜单之间也就紧凑起来了。</p>
<p>空白符虽然是浏览器正常的表现行为，但是通常情况下，设计师同学的设计稿不会出现这些空隙，我们在还原设计稿的时候，怎么去除掉这些空隙呢。<br>要取出空白符产生的间隙，首先要理解空白符归根结底是个字符，通过设置font-size属性可以控制产生的间隙的大小。<br>首先我们将font-size设置成50px试试，修改CSS代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ul</span>, <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">list-style-type</span>:<span class="value"> none</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">50px</span>&#125;</span><br><span class="line">        li &#123; display: inline-block</span></span>; <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;<span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">12px</span> &#125;</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>我们修改ul的font-size为50px，而li的font-size为12px保持原来的字体大小，效果如下：<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo3.jpg" alt="font-size:50px的空隙"><br>可以看到菜单之间的空隙变大了。<br>接着我们设置font-site属性为0px，代码如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ul</span>, <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">list-style-type</span>:<span class="value"> none</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">0px</span>&#125;</span><br><span class="line">        li &#123; display: inline-block</span></span>; <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;<span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">12px</span> &#125;</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo4.jpg" alt="font-size:0的空隙"><br>可以看到菜单之间的空隙没有了，大家可以自行查看<a href="http://runjs.cn/code/2qc4sp6i" target="_blank" rel="external">Demo</a></p>
<h4 id="兼容性问题">兼容性问题</h4><p>在IE8+，FF和Chrome的浏览器，inline-block可以完美的兼容，考虑到IE6和IE7等低版本浏览器的占用率，虽然有办法可以兼容，但本文不再赘述，大家有兴趣的可以查找相关资料。</p>
<h3 id="inline-block的应用">inline-block的应用</h3><p>inline-block的应用什么场景有哪些呢？我们大家考虑一个技术的应用场景时，首先一定要思考的是技术的特性和需求是否符合。inline-block的特点是结合inline和block两种属性的特定，可以设置width和height，并且元素保持行内排列的特性，基于这一点，所有行内排列并且可以设置大小的场景都是我们可以考虑使用inline-block的应用场景。下面举例说明：</p>
<h4 id="网页头部菜单">网页头部菜单</h4><p>网页头部的菜单就是典型的横向排列并且需要设置大小的应用，在inline-block之前，实现菜单基本都是用float属性来实现，float属性会造成高度塌陷，需要清除浮动等问题，使用inline-block实现就不需要在意这样的问题。代码如下：</p>
<blockquote>
<p>HTML代码：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>服装城<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>美妆馆<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>超市<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>全球购<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>闪购<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>团购<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>拍卖<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>金融<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>智能<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>CSS代码</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">a</span>, <span class="tag">ul</span>, <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">list-style-type</span>:<span class="value"> none</span></span>; &#125;</span></span><br><span class="line"><span class="tag">a</span> <span class="rules">&#123; <span class="rule"><span class="attribute">text-decoration</span>:<span class="value"> none</span></span>; <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#333</span></span></span>; &#125;</span> </span><br><span class="line"><span class="class">.header</span> <span class="tag">ul</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; &#125;</span></span><br><span class="line">       <span class="class">.header</span> <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">16px</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">80px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图</p>
</blockquote>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo5.jpg" alt="京东首页导航菜单"></p>
<p>这是模仿京东首页头部导航菜单的实现，使用inline-block可以很简单的实现横向菜单列表</p>
<h4 id="内联块元素">内联块元素</h4><p>除了菜单之外，一切需要行内排列并且可设置大小的需求就可以用inline-block来实现。<br>例如使用a标签做按钮时，需要设置按钮的大小，我们就可以使用inline-block来实现。</p>
<blockquote>
<p>HTML代码：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">    点击右边的按钮直接购买</span><br><span class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">class</span>=<span class="value">"button"</span>&gt;</span></span><br><span class="line">        购买</span><br><span class="line">    <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>CSS代码：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.button</span> <span class="rules">&#123; <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">150px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">45px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#b61d1d</span></span></span>; <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">45px</span></span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">20px</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图</p>
</blockquote>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo6.jpg" alt="a标签菜单"></p>
<h4 id="布局">布局</h4><p>inline-block也可以用于常见的布局，使用它就不需要去注意float属性布局带来的问题。<br>举例说明，创建一个常见的3列布局。</p>
<blockquote>
<p>HTML代码：</p>
</blockquote>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"wrap"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"header"</span>&gt;</span><br><span class="line">        网页头部</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"content"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"left"</span>&gt;</span><br><span class="line">            左侧</span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"center"</span>&gt;</span><br><span class="line">            中间</span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"right"</span>&gt;</span><br><span class="line">            右侧</span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"footer"</span>&gt;</span><br><span class="line">        网页底部</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CSS代码</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span>, <span class="tag">div</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.header</span>, <span class="class">.footer</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ccc</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">120px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">120px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.content</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff6a00</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">1000px</span></span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">0</span></span></span>; &#125;</span></span><br><span class="line">    <span class="class">.content</span> <span class="class">.left</span>, <span class="class">.content</span> <span class="class">.center</span>, <span class="class">.content</span> <span class="class">.right</span> <span class="rules">&#123; <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">16px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">400px</span></span></span>; &#125;</span></span><br><span class="line">    <span class="class">.content</span> <span class="class">.left</span>, <span class="class">.content</span> <span class="class">.right</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>; &#125;</span></span><br><span class="line">    <span class="class">.content</span> <span class="class">.center</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">600px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#00ffff</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图：</p>
</blockquote>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo7.jpg" alt="inline-block的三列布局"><br>这个例子使用了inline-block做出了常见的网页布局。</p>
<p>关于inline-block的应用，只要是从左到右，从上到下，并且需要设置大小的列表都可以用它来实现，而这种需求是非常常见的，相比于float，我更推荐inline-block。inline-block的应用应该还有很多，大家可以多多挖掘出来。</p>
<h3 id="总结">总结</h3><p>相比于使用float所带来的问题，使用inline-block所需要注意的点主要是空白符带来的问题，这一点也可以很方便的解决。<br>使用inline-block可以很方便的进行列表布局，更加符合我们的思维习惯，相信使用它的同学们也会越来越多，欢迎大家讨论。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文详细描述了display:inline-block的基础知识，产生的问题和解决方法以及其常见的应用场景，加深了对inline-block应用的进一步理解。]]>
    
    </summary>
    
      <category term="CSS" scheme="http://luopq.com/tags/CSS/"/>
    
      <category term="Web前端" scheme="http://luopq.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript设计模式理论与实战：单例模式]]></title>
    <link href="http://luopq.com/2015/10/27/design-pattern-singleton/"/>
    <id>http://luopq.com/2015/10/27/design-pattern-singleton/</id>
    <published>2015-10-27T14:19:11.000Z</published>
    <updated>2015-10-27T14:27:23.298Z</updated>
    <content type="html"><![CDATA[<p>在Javascript中，单例模式是一种最基本又经常用到的设计模式，可能在不经意间就用到了单例模式。<br>本文将从最基础的理论开始，讲述单例模式的基本概念和实现，最后用一个例子来讲述单例模式的应用。</p>
<h3 id="理论基础">理论基础</h3><h4 id="概念">概念</h4><p>单例模式，顾名思义就是只有一个实例存在。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。</p>
<h4 id="基本结构">基本结构</h4><p>最简单的单例模式起始就是一个对象字面量，它将有关联的属性和方法组织到一起。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleton = &#123;</span><br><span class="line">    prop:<span class="string">"value"</span>,</span><br><span class="line">    <span class="keyword">method</span>:function()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种形式的单例模式，所有成员都是公开的，都可以通过singleton来访问。这样的缺点是单例中有一些辅助的方法并不希望暴露给使用者，如果使用者用了这些方法，然后在后面维护的时候，一些辅助方法被删除，这样会造成程序错误。<br>如何避免这样从的错误呢？</p>
<h4 id="包含私有成员的单例模式">包含私有成员的单例模式</h4><p>要怎么在类中创建私有成员呢，这通过需要闭包来进行实现，关于闭包的知识，本文不再赘述，大家可以自行Google。<br>基本形式如下：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleton = (function () &#123;</span><br><span class="line">            <span class="keyword">var</span> privateVar = <span class="string">"private"</span>;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                prop: <span class="string">"value"</span>,</span><br><span class="line">                <span class="keyword">method</span>: function () &#123;</span><br><span class="line">                    console.log(privateVar);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br></pre></td></tr></table></figure></p>
<p>首先是一个自执行的匿名函数，在匿名函数中，声明了一个变量privateVar，返回一个对象赋值给单例对象singleton。在匿名函数外部无法访问到privateVar变量，它就是单例对象的私有变量，只能在函数内部或通过暴露出来的方法去访问这个私有变量。这种形式又被成为模块模式。</p>
<h4 id="惰性实例化">惰性实例化</h4><p>不管是直接字面量或者私有成员的单例模式，两者都是在脚本加载时就被创建出来的单例，但是有时候，页面可能永远也用不到这个单例对象，这样会造成资源浪费。对于这种情况，最佳的处理方式就是惰性加载，就是说在需要的时候才去真正实例化这个单例对象，如何实现呢？<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var singleton =<span class="function"> (</span>function<span class="function"> (</span><span class="function">)</span> &#123;</span><br><span class="line">            function<span class="function"> init(</span><span class="function">)</span> &#123;</span><br><span class="line">                var<span class="keyword"> private</span>Var = <span class="string">"private"</span>;</span><br><span class="line">               <span class="instruction"> return </span>&#123;</span><br><span class="line">                    prop: <span class="string">"value"</span>,</span><br><span class="line">                    method: function<span class="function"> (</span><span class="function">)</span> &#123;</span><br><span class="line">                       <span class="function"> console.log(</span>privateVar<span class="function">)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            var<span class="instruction"> instance </span>= null;</span><br><span class="line">           <span class="instruction"> return </span>&#123;</span><br><span class="line">                getInstance: function<span class="function"> (</span><span class="function">)</span> &#123;</span><br><span class="line">                   <span class="instruction"> if </span>(!instance<span class="function">)</span> &#123;</span><br><span class="line">                       <span class="instruction"> instance </span>=<span class="function"> init(</span><span class="function">)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                   <span class="instruction"> return </span>instance;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">       <span class="function"> &#125;)(</span><span class="function">)</span>;</span><br></pre></td></tr></table></figure></p>
<p>首先将创建单例对象的代码封装到init函数中，然后声明一个私有变量instance表示单例对象的实例，公开一个方法getInstance来获取单例对象。<br>调用的时候就通过singleton.getInstance()来进行调用，单例对象是在调用getInstance的时候才真正被创建。</p>
<h4 id="适用场合">适用场合</h4><p>单例模式是JS中最常使用的设计模式，从增强模块性和代码组织性等方面来说，应该尽可能的使用单例模式。它可以把相关代码组织到一起便于维护，对于大型项目，每个模块惰性加载可以提高性能，隐藏实现细节，暴露出常用的api。常见的类库比如underscore，jQuery我们都可以将其理解为单例模式的应用。</p>
<h3 id="结合实战">结合实战</h3><p>前面已经讲过，单例模式是最常用的设计模式之一，我们来举个例子进行说明，<br>下面的代码主要实现一个简单的日期帮助类，通过单例模式实现：</p>
<h4 id="基本的单例模式结构">基本的单例模式结构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dateTimeHelper = &#123;</span><br><span class="line">            now: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            &#125;,</span><br><span class="line">            format: <span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> date.getFullYear() + <span class="string">"-"</span> + (date.getMonth() + <span class="number">1</span>) + <span class="string">"-"</span> + date.getDate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dateTimeHelper.now());</span><br></pre></td></tr></table></figure>
<p>这段代码通过对象字面量实现单例模式，使用的时候直接调用方法即可。</p>
<h4 id="惰性加载实现单例模式">惰性加载实现单例模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> dateTimeHelper = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    now: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">                    &#125;,</span><br><span class="line">                    format: <span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> date.getFullYear() + <span class="string">"-"</span> + (date.getMonth() + <span class="number">1</span>) + <span class="string">"-"</span> + date.getDate();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                getInstance: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">                        instance = init();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> instance;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();  </span><br><span class="line"><span class="built_in">console</span>.log(dateTimeHelper.getInstance().now())</span><br></pre></td></tr></table></figure>
<p>这就是惰性加载的单例模式。</p>
<h3 id="总结">总结</h3><p>单例模式的好处在于对代码的组织作用，将相关的属性和方法封装在一个不会被多次实例化的对象中，让代码的维护和调试更加轻松。隐藏了实现细节，可以防止被错误修改，还防止了全局命名空间的污染。另外可以通过惰性加载提高性能，减少不必要的内存消耗。</p>
]]></content>
    <summary type="html">
    <![CDATA[在Javascript中，单例模式是一种最基本又经常用到的设计模式，可能在不经意间就用到了单例模式。本文将从最基础的理论开始，讲述单例模式的基本概念和实现，最后用一个例子来讲述单例模式的应用。]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://luopq.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Web前端" scheme="http://luopq.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[详解CSS盒模型]]></title>
    <link href="http://luopq.com/2015/10/26/CSS-Box-Model/"/>
    <id>http://luopq.com/2015/10/26/CSS-Box-Model/</id>
    <published>2015-10-26T08:41:05.000Z</published>
    <updated>2015-10-27T14:32:42.744Z</updated>
    <content type="html"><![CDATA[<p>本文主要是学习CSS盒模型的笔记，总结了一些基本概念，知识点和细节。</p>
<h3 id="一些基本概念">一些基本概念</h3><p>HTML的大多数元素都是块级(block)元素或行内(inline)元素</p>
<h4 id="块级元素">块级元素</h4><p>默认情况下，块级元素会另起一行，并尽可能的充满整个容器。<br>块级元素可以包含行内元素和其他块级元素，相比于行内元素可以创建更复杂和大型的结构</p>
<h5 id="块级元素列表：">块级元素列表：</h5><p>html5新增的元素：<br>figcation：图文信息组标题 ，article：文章，figure：图文信息组<br>output：表单输出，aside：侧栏内容，footer：区段尾或页尾，audio：音频播放<br>video：视频播放，section：页面区段，canvas：画布、绘制图形，header：区段头或页头<br>hgroup：标题组，</p>
<p>address：联系方式信息，ol：有序列表，p：行，form：表单，pre：预格式化文本，blockqute：块引用<br>h1-h6：标题，table：表格，dd：列表中条目描述，dl：定义列表，div，hr：水平分割线</p>
<h4 id="行内元素">行内元素</h4><p>行内元素不会另起一行只占据它对应的标签的边框所包含内容的空间，<br>只能包含数据和其他行内元素</p>
<h5 id="行内元素列表">行内元素列表</h5><p>b，big，i，small，tt，<br>abbr，acronym，cite，code，dfn，em，kbd，strong，samp，var，<br>a，bdo，br，img，map，object，q，script，span，sub，sup，<br>button，input，label，select，textarea</p>
<h4 id="块级元素和行内元素的区别">块级元素和行内元素的区别</h4><p>块级元素：<br>1.会另起一行，<br>2.可以设置width，height，margin，padding，border属性<br>3.默认宽度是容器的100%</p>
<p>行内元素：<br>1.和其他元素在同一行内<br>2.高度和宽度就是内容的高度和宽度<br>3.可以设置margin-left和margin-right属性，无法设置margin-top和margin-bottom属性<br>4.border和padding可以设置，但是border-top和padding-top到页面顶部后就不再增加</p>
<h4 id="正常流">正常流</h4><p>正常流指：从左到右，从上到下显示。要让一个元素不在正常流中，唯一的办法是让元素浮动或定位</p>
<h4 id="非替换元素">非替换元素</h4><p>如果元素的内容包含在文档中，则称之为非替换元素。比如一个段落的文本都在该元素本身之内，这个段落就是一个非替换元素。</p>
<h4 id="替换元素">替换元素</h4><p>作为其他内容占位符的一个元素称为替换元素，根据标签和属性的值来显示内容的元素。比如img元素，它只是指向一个图像文件，这个文件插入到文档流中。大多数表单元素（input，根据type属性来显示内容）也是替换元素。</p>
<h4 id="根元素">根元素</h4><p>位于文档树的顶端，在html文档中就是html元素</p>
<h3 id="盒模型">盒模型</h3><p>html文档中的每个元素都被描绘成矩形盒子，这些矩形盒子通过一个模型来描述其占用空间，这个模型称为盒模型。盒模型通过四个边界来描述：margin（外边距），border（边框），padding（内边距），content（内容区域），如图所示：<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model.jpg" alt="CSS盒模型" title="CSS盒模型"></p>
<h4 id="几点提示">几点提示</h4><p>1.padding，border，margin都是可选的，默认值为0，但是浏览器会自行设置元素的margin和padding，通过在css样式表中设置<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*<span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span></span><br><span class="line">&#125;</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>来覆盖浏览器样式。注意：这里的*表示所有元素，但是这样性能不好，建议一次列出常用的元素来设置</p>
<p>2.如果给元素设置背景，并且边框的颜色为透明，背景将应用于内容，内边距和边框组成的区域。</p>
<p>3.浏览器兼容性<br>一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。<br>根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。<br>不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。</p>
<h4 id="水平格式化">水平格式化</h4><h5 id="非替换元素的水平格式化">非替换元素的水平格式化</h5><p>水平格式化的7大属性是：margin-left，border-left，padding-left，width，padding-right，border-right，margin-right。这7个属性值加起来往往是父级元素的width值。</p>
<p>其中margin-left，width，margin-right可以设置为auto。<br>主要有下面几种情况：</p>
<h6 id="一个属性设置成auto">一个属性设置成auto</h6><p>如果三个属性中某个属性设置了auto，其余两个为特定的值，那么设置auto的属性为确定所需的元素，从而使得元素框的宽度等于父级元素的width。</p>
<blockquote>
<p>例子</p>
</blockquote>
<p>HTML代码<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;span <span class="type">class</span>=<span class="string">"block"</span>&gt;块级元素&lt;/span&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>CSS代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.parent</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">600px</span></span><br><span class="line">&#125;</span><br><span class="line">div &#123;</span><br><span class="line">    background: <span class="hexcolor">#eeb3b3</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> auto</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo1.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo1.2.jpg" alt=""></p>
<p>被设置为auto的margin-auto属性值为340px，即margin-left+border-left+padding-left+width+padding-right+border-right+margin-right=340+0+30+100+30+0+100=600</p>
<h6 id="总和不等于父级元素的width">总和不等于父级元素的width</h6><p>使用auto可以弥补实际值与所需总和的差距，如果三个属性都设置了特定值，但是总和不等于父级元素的width。<br>修改上面例子中的margin-left为100px，即<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo2.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo2.2.jpg" alt=""></p>
<p>在上面的CSS中，margin-left，width，margin-right都设置了特定值，但是七大属性总和不等于父级元素的width。这种情况下：<br>在FF中，margin-right的值为开发者设定的值<br>在Chrome中，margin-right被强制为auto</p>
<h6 id="width设置为auto">width设置为auto</h6><p>如果margin-left和margin-right都设置特定值，width设置为auto，则width将会等于某个特定值以达到父级元素的width。<br>如果将width修改为auto，即：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo3.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo3.2.jpg" alt=""></p>
<p>元素的width将被被设定为340px来使总和达到父级元素的width</p>
<h6 id="margin-left和margin-right设置成auto">margin-left和margin-right设置成auto</h6><p>如果margin-left和amrgin-right都设置为auto，则它们会设置相等的值，因此元素将在父级元素中居中。这是将块级元素居中的一种方法。注意：text-align设置为center只适用于块级元素中的内联内容居中，并不能使块级元素居中。<br>设置margin属性为margin:0 auto<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>;    </span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo4.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo4.2.jpg" alt=""><br>margin-left和margin-right的值会被设置为相等，使得元素居中</p>
<h6 id="某个外边距和width设置成auto">某个外边距和width设置成auto</h6><p>如果设置某个外边距和width为auto，则设置为auto的外边距会为0，width会设置为所需的值来填充父级元素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> auto</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo5.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo5.2.jpg" alt=""><br>设置margin-left和width为auto，则margin-left将被设置为0，width会被设置为440px来满足父级元素的width</p>
<h6 id="全设置成auto">全设置成auto</h6><p>如果margin和width都设置为auto，则两个外边距会设置为0，width会尽可能宽。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> auto</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> auto</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo6.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo6.2.jpg" alt=""></p>
<p>三个值都设置为auto，则两个外边距会设置为0，width会被设置为540px</p>
<h6 id="负外边距">负外边距</h6><p>7个属性只要都是大于等于0的值，总和总是等于父级元素的width，不会超过父级元素的区域<br>但是可以通过制定负外边距来得到比父级元素width更大的区域<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> -<span class="number">400px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo7.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo7.2.jpg" alt=""></p>
<p>设置margin-right为-400px，则元素会大于父级元素width，因为100+0+30+840+30+0-400=600，元素的width为840px</p>
<h5 id="替换元素的水平格式化">替换元素的水平格式化</h5><p>替换元素的水平格式化规则和非替换元素的规则类似，只有一个width有区别，如果width设置为auto，则元素的宽度是内容的固有宽度。注意：对于img标签，如果width不等于其固有宽度，则height也会等比例增加，除非设置特定值。反过来如果height设置高度，width也会等比例增加</p>
<h4 id="垂直格式化">垂直格式化</h4><p>垂直格式化和水平格式化类似，也有7个相关属性：margin-top，border-top，padding-top，height，padding-bottom，border-bottom，margin-bottom，这7个属性的总和必须等于父级元素的height属性。<br>其中margin-top，margin-bottom和height可以设置成auto<br>一个正常流中的块元素的margin-top和margin-bottom设置为auto后，会被设置为0，即不能将元素垂直居中，实际上元素没有外边距。定位元素如果设置成auto有不同的处理结果。</p>
<p>如果正常流元素的height设置为auto，则其高度将会被设置为其内容元素的高度总和。</p>
<h5 id="垂直外边距合并">垂直外边距合并</h5><p>垂直外边距合并：当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p>
<blockquote>
<p>例子</p>
</blockquote>
<p>html代码<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"m20"</span>&gt; 外边距<span class="number">20</span>px &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"m10"</span>&gt; 外边距<span class="number">10</span>px &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>css代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.p20</span> <span class="rules">&#123; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">20px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.p10</span> <span class="rules">&#123; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo8.jpg" alt=""><br>如图所示，两个div标签的外边距分别是20px，10px，但是最终两个div之间的距离是20px，而不是20+10=30px</p>
<h4 id="行内元素的盒模型">行内元素的盒模型</h4><p>行内元素也是有盒模型的，但是有几点要注意：<br>1.对于非替换元素，比如a，span标签等<br>（1）可以设置margin-left和margin-right属性，无法设置margin-top和margin-bottom属性<br>（2）行内元素border和padding可以设置，但是border-top和padding-top到页面顶部后就不再增加<br>2.对于替换元素，比如input，img标签<br>margin，padding，border都有效果</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要是学习CSS盒模型的笔记，总结了一些基本概念，知识点和细节。HTML的大多数元素都是块级(block)元素或行内(inline)元素。<br/>块级元素：默认情况下，块级元素会另起一行，并尽可能的充满整个容器。块级元素可以包含行内元素和其他块级元素，相比于行内元素可以创建更复杂和大型的结构。<br/>行内元素：行内元素不会另起一行只占据它对应的标签的边框所包含内容的空间，只能包含数据和其他行内元素。<br/>盒模型：html文档中的每个元素都被描绘成矩形盒子，这些矩形盒子通过一个模型来描述其占用空间，这个模型称为盒模型。盒模型通过四个边界来描述：margin（外边距），border（边框），padding（内边距），content（内容区域）。]]>
    
    </summary>
    
      <category term="CSS" scheme="http://luopq.com/tags/CSS/"/>
    
      <category term="Web前端" scheme="http://luopq.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[蚁人和头脑特工队]]></title>
    <link href="http://luopq.com/2015/10/17/movie-reviews-for-Ant-Man-and-Inside-Out/"/>
    <id>http://luopq.com/2015/10/17/movie-reviews-for-Ant-Man-and-Inside-Out/</id>
    <published>2015-10-17T10:01:02.000Z</published>
    <updated>2015-10-26T13:16:21.673Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;国庆放假后连上了9天班，终于找到机会放松了。看了两部电影，想写点东西</p>
<h4 id="蚁人">蚁人</h4><p>&emsp;&emsp;又一部典型的超级英雄片,落魄的主角如何逆袭成为英雄，但不同于其他英雄，他只是想成为自己女儿心中的英雄。整篇看下来幽默搞笑，又萌又酷的英雄，逗比的配角插科打诨的本事无缝穿插中，最后的结局也很温馨。  </p>
<p>&emsp;&emsp;主角变小后的微观视角很棒，我相信很多人都会想象自己变小后的感受。在浴缸，D厅，下水道，电路板，还有最后的在iphone手机和玩具里的打斗，每个场景都很有想象力。微观视角和正常视角的切换十分自然，充满幽默感。</p>
<p>&emsp;&emsp;除了主角本身充满喜剧效果，三个逗比同伙表现得也很棒，各有特点。不同于其他严肃的英雄导师，发明蚁人盔甲的导师也时不时冒出几句逗乐观众的台词。我喜欢这种有亮点但有不抢镜的配角安排。</p>
<p>&emsp;&emsp;影片中的打斗戏很棒，主角忽大忽小的变换和打斗很酷而且自带萌点和趣味。他没有什么特别具有杀伤力的招数，有的只是普通人的拳头，关键在于怎么灵活运用自己变小的能力来击败对手。</p>
<p>&emsp;&emsp;对于这类标准的美国英雄片，我最不喜欢的大概就是和主角对立的反派总是拥有和主角类似的超能力，而且能力更强大。在前面反派介绍自己黄蜂战衣的时候，大概就能猜出反派是个什么样的人物了。</p>
<p>&emsp;&emsp;总的来说，一部让我喜欢的英雄电影，4星推荐。</p>
<h4 id="头脑特工队">头脑特工队</h4><p>&emsp;&emsp;特别有创意特别有想象力的一部动画片，第一次发现我们的情绪，思维还可以通过这样的形式表现出来。虽然是一部动画片，但感觉这是一部更适合大人看的动画片。</p>
<p>&emsp;&emsp;影片中很有想象力的将我们情绪展现为头脑中住的五个代表不同情绪的小家伙来掌控。由乐乐为领导，控制着整个大脑的运行，努力为小女孩创造更多的美好记忆。在乐乐和忧忧因为意外脱离控制总部，进入大脑运行的世界。脑中世界不同的岛屿代表不同的情感联系，记忆垃圾场，造梦工厂，想象出来的伙伴，记忆清理工，很形象的展示了大脑的运行。</p>
<p>&emsp;&emsp;与其他情绪不同的是，悲伤具有感染记忆的能力，她能让曾经美好的记忆带点忧伤的成分，所以快乐总是在阻止悲伤接触任何东西，甚至画了一个圈来限制悲伤的行动自由，但没有忧伤的情绪显然是不完整的。在脑中世界和忧伤一起经历过各种冒险的领导快乐也知道应该让忧伤去做她适合的工作，让重塑的情感岛屿更具坚固性。</p>
<p>&emsp;&emsp;影片中也展示了爸爸和妈妈脑袋里的五个家伙。爸爸脑袋里领导情绪是愤怒，妈妈里的领导情绪是忧伤，而小女孩的领导情绪是快乐。什么样的情绪主导，整个人表现出来的状态就是怎么样的。随着成长和精力，我们的情绪领导也许会从最初的快乐在进行转变，我们肯定悲伤的价值，但我们应该让快乐成为主导。</p>
<p>&emsp;&emsp;我脑海的的情绪小家伙，又是怎么样的组成呢？</p>
]]></content>
    <summary type="html">
    <![CDATA[国庆放假后连上了9天班，终于找到机会放松了。看了两部电影，想写点东西。]]>
    
    </summary>
    
      <category term="电影" scheme="http://luopq.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="娱乐" scheme="http://luopq.com/categories/%E5%A8%B1%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <link href="http://luopq.com/2015/10/15/learn-markdown/"/>
    <id>http://luopq.com/2015/10/15/learn-markdown/</id>
    <published>2015-10-15T12:10:33.000Z</published>
    <updated>2015-10-26T13:16:21.672Z</updated>
    <content type="html"><![CDATA[<h3 id="基本语法">基本语法</h3><h4 id="标题">标题</h4><p>一级标题： # 一级标题<br>二级标题： ## 二级标题<br>三级标题： ### 三级标题<br>四级标题： #### 四级标题<br>五级标题： ##### 五级标题<br>六级标题： ###### 六级标题</p>
<h4 id="列表">列表</h4><p>无序列表 ：在文字前加上“-”或“*”  </p>
<ul>
<li>1  </li>
<li>2  </li>
<li>3</li>
</ul>
<p>有序列表：直接加上1. 2.  </p>
<ol>
<li>第一项  </li>
<li>第二项  </li>
<li>第三项  </li>
</ol>
<h4 id="引用">引用</h4><p>在文本前面加上 &gt; （大于号）</p>
<blockquote>
<p>这是一段引用文字</p>
</blockquote>
<h4 id="图片和链接">图片和链接</h4><p>图片和链接的区别在于 ! 感叹号</p>
<p>图片：<code>![图片替代文字](图片链接)</code><br>插入图片：<br><img src="http://tp4.sinaimg.cn/1836010911/180/5614933698/1" alt="我的头像"></p>
<p>链接：<code>[链接名称](链接地址)</code><br>插入链接：<a href="luopq.com">我的博客</a></p>
<h4 id="粗体和斜体">粗体和斜体</h4><p>用两个”*“包含就是粗体：<code>**粗体**</code><br><strong>这里是粗体</strong>  </p>
<p>用一个”*“包含就是斜体：<code>*斜体*</code><br><em>这里是斜体</em></p>
<h4 id="表格">表格</h4><pre><code>|<span class="string"> 第一列 </span>|<span class="string"> 第二列 </span>|<span class="string"> 第三列 </span>|
|<span class="string">-------</span>|<span class="string">-------</span>|<span class="string">-------</span>|
|<span class="string">   1   </span>|<span class="string">   2   </span>|<span class="string">   3   </span>|
</code></pre><table>
<thead>
<tr>
<th>第一列</th>
<th>第二列</th>
<th>第三列</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
</tbody>
</table>
<h4 id="代码框">代码框</h4><p>三种方式:  </p>
<ol>
<li>行内代码：使用符号”`“包裹起来，在ESC键下面<br> <code>var a = 0</code>  </li>
<li><p>块代码：使用tab键缩进或空格缩进四个    </p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{
    <span class="built_in">console</span>.log(<span class="string">"test"</span>);
}   
</code></pre></li>
<li><p>前后使用三个”`“将代码包裹起来  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[Markdown的基本语法，只要掌握几个概念就能畅快写字啦]]>
    
    </summary>
    
      <category term="markdown" scheme="http://luopq.com/tags/markdown/"/>
    
  </entry>
  
</feed>
