<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[狼狼的蓝胖子]]></title>
  <subtitle><![CDATA[我只是想写点字]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://luopq.com/"/>
  <updated>2015-11-11T14:40:29.217Z</updated>
  <id>http://luopq.com/</id>
  
  <author>
    <name><![CDATA[LuoPQ]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Javascript设计模式理论与实战：桥接模式]]></title>
    <link href="http://luopq.com/2015/11/11/design-pattern-bridge/"/>
    <id>http://luopq.com/2015/11/11/design-pattern-bridge/</id>
    <published>2015-11-11T14:37:21.000Z</published>
    <updated>2015-11-11T14:40:29.217Z</updated>
    <content type="html"><![CDATA[<p>桥接模式将抽象部分与实现部分分离开来，使两者都可以独立的变化，并且可以一起和谐地工作。抽象部分和实现部分都可以独立的变化而不会互相影响，降低了代码的耦合性，提高了代码的扩展性。</p>
<h3 id="基本理论">基本理论</h3><p>桥接模式定义：将抽象部分与它的实现部分分离，使它们都可以独立地变化。<br>桥接模式主要有4个角色组成：<br>（1）抽象类<br>（2）扩充抽象类<br>（3）实现类接口<br>（4）具体实现类<br>根据javascript语言的特点，我们将其简化成2个角色：<br>（1）扩充抽象类<br>（2）具体实现类<br>怎么去理解桥接模式呢？我们接下来举例说明</p>
<h3 id="桥接模式的实现">桥接模式的实现</h3><p>理解桥接模式的思想，关键是要理解其分离抽象部分和实现部分的思想。我们举例进行说明</p>
<h4 id="最简单的桥接模式">最简单的桥接模式</h4><p>其实我们最经常用的jQuery的each函数就是一个典型的桥接模式，我们模拟其实现如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">each</span> = <span class="function"><span class="keyword">function</span> <span class="params">(arr, fn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> val = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (fn.call(val, i, val, arr)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">each</span>(arr, <span class="function"><span class="keyword">function</span> <span class="params">(i, v)</span> </span>&#123;</span><br><span class="line">    arr[i] = v * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>在这个例子中，我们通过each函数循环了arr数组，别看这个例子很常见，但其中就包含了典型的桥接模式。<br>在这个例子中，抽象部分是each函数，也就是上面说的扩充抽象类，实现部分是fn，即具体实现类。抽象部分和实现部分可以独立的进行变化。这个例子虽然简单，但就是一个典型的桥接模式的应用。</p>
<h4 id="插件开发中的桥接模式">插件开发中的桥接模式</h4><p>桥接模式的一个适用场景是组件开发。我们平时开发组件为了适应不同场合，组件相应的会有许多不同维度的变化。桥接模式就可以应用于此，将其抽象与实现分离，使组件的扩展性更高。<br>假设我们要开发一个弹窗插件，弹窗有不同的类型：普通消息提醒，错误提醒，每一种提醒的展示方式还都不一样。这是一个典型的多维度变化的场景。首先我们定义两个类：普通消息弹窗和错误消息弹窗。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MessageDialog</span><span class="params">(animation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.animation = animation;</span><br><span class="line">&#125;</span><br><span class="line">MessageDialog.prototype.show = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.animation.show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ErrorDialog</span><span class="params">(animation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.animation = animation;</span><br><span class="line">&#125;</span><br><span class="line">ErrorDialog.prototype.show = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.animation.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这两个类就是前面提到的抽象部分，也就是扩充抽象类，它们都包含一个成员animation。<br>两种弹窗通过show方法进行显示，但是显示的动画效果不同。我们定义两种显示的效果类如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinerAnimation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">LinerAnimation.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"it is liner"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EaseAnimation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">EaseAnimation.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"it is ease"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这两个类就是具体实现类，它们实现具体的显示效果。那我们如何调用呢？<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="keyword">new</span> MessageDialog(<span class="keyword">new</span> LinerAnimation());</span><br><span class="line">message.show();</span><br><span class="line"><span class="keyword">var</span> error = <span class="keyword">new</span> ErrorDialog(<span class="keyword">new</span> EaseAnimation());</span><br><span class="line">error.show();</span><br></pre></td></tr></table></figure></p>
<p>如果我们要增加一种动画效果，可以再定义一种效果类，传入即可。</p>
<h3 id="总结">总结</h3><p>学习桥接模式关键是要理解抽象部分与实现部分的分离，使得二者可以独立的变化，而不必拘泥于形式。JS插件灵活的变化，适用场景的多变就非常适合使用这种模式来实现。使用桥接模式最重要的是要找出系统中不同的变化维度。</p>
]]></content>
    <summary type="html">
    <![CDATA[桥接模式将抽象部分与实现部分分离开来，使两者都可以独立的变化，并且可以一起和谐地工作。抽象部分和实现部分都可以独立的变化而不会互相影响，降低了代码的耦合性，提高了代码的扩展性。]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://luopq.com/tags/Javascript/"/>
    
      <category term="设计模式" scheme="http://luopq.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Web前端" scheme="http://luopq.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript设计模式理论与实战：适配器模式]]></title>
    <link href="http://luopq.com/2015/11/10/desgin-pattern-adapter/"/>
    <id>http://luopq.com/2015/11/10/desgin-pattern-adapter/</id>
    <published>2015-11-10T15:00:44.000Z</published>
    <updated>2015-11-10T15:01:59.123Z</updated>
    <content type="html"><![CDATA[<p>有的时候在开发过程中，我们会发现，客户端需要的接口和提供的接口发生不兼容的问题。由于特殊的原因我们无法修改客户端接口。在这种情况下，我们需要适配现有接口和不兼容的类，这就要提到适配器模式。通过适配器，我们可以在不用修改旧代码的情况下也能使用它们，这就是适配器的能力。</p>
<h3 id="基本理论">基本理论</h3><p>适配器模式：将一个接口转换成客户端需要的接口而不需要去修改客户端代码，使得不兼容的代码可以一起工作。</p>
<p>适配器主要有3个角色组成：<br>（1）客户端：调用接口的类<br>（2）适配器：用来连接客户端接口和提供服务的接口的类<br>（3）适配者：提供服务，但是却与客户端接口需求不兼容服务类。</p>
<h3 id="适配器模式的实现">适配器模式的实现</h3><h4 id="最简单的适配器">最简单的适配器</h4><p>适配器模式没有想象中的那么复杂，举个最简单的例子。<br>客户端调用一个方法进行加法计算：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = add(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></p>
<p>但是我们没有提供add这个方法，提供了同样类似功能的sum方法：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(v1,v2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1 + v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>为了避免修改客户端和服务端，我们增加一个包装函数：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">function</span> <span class="keyword">add </span>(<span class="literal">v1</span>,<span class="literal">v2</span>)&#123;</span><br><span class="line">    reutrn sum(<span class="literal">v1</span>,<span class="literal">v2</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这就是一个最简单的适配器模式，我们在两个不兼容的接口之间添加一个包装方法，用这个方法来连接二者使其共同工作。</p>
<h4 id="实际应用">实际应用</h4><p>随着前端框架的发展，越来越多的开发者开始使用MVVM框架进行开发，只需要操作数据而不需要操作DOM元素，jQuery的作用越来越少。而很多项目中还是引用着jQuery库作用工具类，因为我们要利用jQuery提供的ajax去服务器请求数据。如果jQuery在项目中的作用仅仅是作为ajax工具库的话，有点杀鸡焉用牛刀的感觉，造成资源浪费。这个时候我们完全可以封装一个自己的ajax库。<br>假设我们封装的ajax就通过一个函数进行使用：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ajax(&#123;</span><br><span class="line">    url:<span class="string">'/getData'</span>,</span><br><span class="line">    <span class="built_in">type</span>:<span class="string">'Post'</span>,</span><br><span class="line">    dataType:<span class="string">'json'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        id:<span class="string">"123"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;)</span><br></pre></td></tr></table></figure></p>
<p>除了调用接口ajax与jQuery的$.ajax的不同，其他完全一样。<br>项目中请求ajax的地方必然很多，我们替换jQuery的时候不可能一个一个去修改$.ajax，那怎么办呢，这个时候，我们就可以增加一个适配器：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = &#123;</span><br><span class="line">    ajax:<span class="function"><span class="keyword">function</span> <span class="params">(options)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ajax(options);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样就能兼容旧代码和新接口，避免对已有的代码的修改。</p>
<h3 id="总结">总结</h3><p>适配器模式的原理很简单，就是新增一个包装类，对新的接口进行包装以适应旧代码的调用，避免修改接口和调用代码。</p>
<p>适用场景：存在较多代码调用旧接口，为了避免修改旧代码和更换新接口，不影响现有实现方式的应用场景。</p>
]]></content>
    <summary type="html">
    <![CDATA[有的时候在开发过程中，我们会发现，客户端需要的接口和提供的接口发生不兼容的问题。由于特殊的原因我们无法修改客户端接口。在这种情况下，我们需要适配现有接口和不兼容的类，这就要提到适配器模式。通过适配器，我们可以在不用修改旧代码的情况下也能使用它们，这就是适配器的能力。]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://luopq.com/tags/Javascript/"/>
    
      <category term="设计模式" scheme="http://luopq.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Web前端" scheme="http://luopq.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript设计模式理论与实战：工厂方法模式]]></title>
    <link href="http://luopq.com/2015/11/10/design-pattern-factory-method/"/>
    <id>http://luopq.com/2015/11/10/design-pattern-factory-method/</id>
    <published>2015-11-10T06:44:26.000Z</published>
    <updated>2015-11-11T11:11:28.232Z</updated>
    <content type="html"><![CDATA[<p>本文从简单工厂模式的缺点说起，引入工厂方法模式，介绍的工厂方法模式的基本知识，实现要点和应用场景，最后举例进行说明工厂方法模式的应用。<br>在之前的《<a href="http://luopq.com/2015/11/03/design-pattern-factory/">Javascript设计模式理论与实战：简单工厂模式</a>》这篇文章中，我们介绍了简单工厂的知识和一些应用。简单工厂模式存在一个唯一的工厂类，它的优点是所有产品类的实例化集中管理，便于理解，但这既是优点也是缺点。如果产品类的数量较少并且不会经常发生变化，我们可以直接利用简单工厂模式，但是有的时候，需求是随时在变的，产品类也可能随时在增加，如果使用简单工厂模式，就不可避免的要去修改工厂类的代码。要解决这个问题，就要提到今天要说的工厂方法模式。</p>
<h3 id="基本概念">基本概念</h3><p>工厂方法模式：不再有一个唯一的工厂类就创建产品，而是将不同的产品交给对应的工厂子类去实现。每个产品由负责生产的子工厂来创造。如果添加新的产品，需要做的是添加新的子工厂和产品，而不需要修改其他的工厂代码。</p>
<p>工厂方法模式主要有三种类组成：<br>1.抽象工厂类：负责定义创建产品的公共接口。<br>2.产品子工厂：继承抽象工厂类，实现抽象工厂类提供的接口<br>3.每一种产品各自的产品类</p>
<h3 id="工厂方法模式的实现">工厂方法模式的实现</h3><p>首先，我们对《<a href="http://luopq.com/2015/11/03/design-pattern-factory/">Javascript设计模式理论与实战：简单工厂模式</a>》一文中简单工厂模式的代码进行改造。下面是简单工厂公式的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> productEnums = &#123;</span><br><span class="line">    flight: <span class="string">"flight"</span>,</span><br><span class="line">    hotel: <span class="string">"hotel"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"This is Flight"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hotel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"This is Hotel"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> productFactory = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> productFactories = &#123;</span><br><span class="line">        <span class="string">"flight"</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Flight();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"hotel"</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Hotel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        createProduct: <span class="function"><span class="keyword">function</span> (<span class="params">productType</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> productFactories[productType]();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.shopCart = [];</span><br><span class="line">&#125;</span><br><span class="line">User.prototype = &#123;</span><br><span class="line">    constructor: User,</span><br><span class="line">    order: <span class="function"><span class="keyword">function</span> (<span class="params">productType</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shopCart.push(productFactory.createProduct(productType));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>要将上面的代码修改成工厂方法模式，首先要构造一个抽象工厂类。在JS中，由于我们抽象类的概念，我们无法做到像Java，C#的抽象工厂类，但是我们可以去模拟它。代码如下<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AbstractFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">AbstractFactory.prototype.createProduct = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"没有实现该方法"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这段代码中，定义了一个工厂类，然后定义了它的一个方法CreateProduct，这个方法模拟抽象方法，不提供具体实现，而是抛出错误，继承的工厂类就要去实现具体方法，否则会抛错，这就模拟了一个抽象工厂类。<br>定义完抽象工厂类后，现在我们要做的就是定义子工厂去实现它，我们分别定义两个子工厂FlightFactory和HotelFactory。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FlightFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AbstractFactory.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">FlightFactory.prototype = <span class="keyword">new</span> AbstractFactory();</span><br><span class="line">FlightFactory.prototype.createProduct = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Flight();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HotelFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AbstractFactory.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">HotelFactory.prototype = <span class="keyword">new</span> AbstractFactory();</span><br><span class="line">HotelFactory.prototype.createProduct = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Hotel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上代码分别定义了两个子工厂类，每个子类继承抽象工厂类，然后实现createProduct方法，每一种产品在各自的工厂类里创建。<br>在客户端怎么调用呢？<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="literal">factory</span> = <span class="keyword">new</span> FlightFactory();</span><br><span class="line"><span class="literal">factory</span>.createProduct();</span><br><span class="line"><span class="literal">factory</span> = <span class="keyword">new</span> HotelFactory();</span><br><span class="line"><span class="literal">factory</span>.createProduct();</span><br></pre></td></tr></table></figure></p>
<h3 id="疑点解答">疑点解答</h3><p>首先我们要理解一个概念：开放封闭原则。<br>软件实体应该是可扩展但不可修改的，就是对扩展是开放但是对修改是封闭的。体现在两个方面：<br>（1）对扩展开放，产品有新需求或变活时，可以对现有代码进行扩展，以适应新变化<br>（2）对修改封闭，类一旦设计完成，就不应该对其进行修改。</p>
<p>下面来说说几个疑点<br>1、相比于简单工厂模式，工厂方法模式增多了一个抽象工厂类和多个子工厂类，这样代码不是更复杂了吗？<br>确实，代码比简单工厂模式复杂了，引入了抽象层，还有子工厂，这会增加代码的复杂度和理解难度。但是相比于简单工厂模式，代码的维护性和扩展性提高了，新增产品时，只需要增加对应的产品类和产品工厂类，不需要修改到抽象工厂类和其他子工厂。更加符合面向对象的开放封闭原则。<br>当然具体场景具体分析，复杂性和扩展性相比如何舍去，在使用的时候要结合实际场景去分析。<br>2、在客户端调用的时候，每一种产品还是需要知道具体的工厂类来调用，好像区别不大？<br>和简单工厂模式的区别在于：我们将判断使用哪一个产品类的代码从工厂类转移到了调用的客户端这里，如果有新功能要添加，我们要修改的是客户端的代码而不是工厂类的代码，这样才符合开放封闭原则。</p>
<h3 id="总结">总结</h3><h4 id="实现要点">实现要点</h4><p>在JS中，我们实现工厂方法模式主要包括3个角色：<br>1.抽象工厂类：提供工厂方法的声明<br>2.子工厂类：实现抽象工厂类的工厂方法<br>3.产品类：具体的产品类</p>
<h4 id="优缺点">优缺点</h4><p>优点：克服了简单工厂模式的缺点。如果需要增加新的产品类，无须修改现有系统，只需要增加新的工厂类和产品类；每个工厂类封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性。<br>缺点：增加新产品的同时需要增加新的工厂，导致系统类的个数成对增加，在一定程度上增加了系统的复杂性。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文从简单工厂模式的缺点说起，引入工厂方法模式，介绍的工厂方法模式的基本知识，实现要点和应用场景，最后举例进行说明工厂方法模式的应用。]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://luopq.com/tags/Javascript/"/>
    
      <category term="设计模式" scheme="http://luopq.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Web前端" scheme="http://luopq.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[详解CSS float属性]]></title>
    <link href="http://luopq.com/2015/11/08/CSS-float/"/>
    <id>http://luopq.com/2015/11/08/CSS-float/</id>
    <published>2015-11-08T13:10:47.000Z</published>
    <updated>2015-11-11T11:11:28.231Z</updated>
    <content type="html"><![CDATA[<p>CSS中的float属性是一个频繁用到的属性，对于初学者来说，如果没有理解好浮动的意义和表现出来的特性，在使用的使用很容易陷入困惑，云里雾里，搞不清楚状态。本文将从最基本的知识开始说起，谈谈关于浮动的应用，出现的问题和解决方案。</p>
<h3 id="基础知识">基础知识</h3><p>float，顾名思义就是浮动，设置了float属性的元素会根据属性值向左或向右浮动，我们称设置了float属性的元素为浮动元素。<br>浮动元素会从普通文档流中脱离，但浮动元素影响的不仅是自己，它会影响周围的元素对齐进行环绕。举例说明如下：<br>Html代码：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"box"</span>&gt;</span><br><span class="line">        &lt;span <span class="type">class</span>=<span class="string">"float-ele"</span>&gt;</span><br><span class="line">            浮动元素</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        普通文档流普通文档流普通文档流普通文档流普通文档流普通文档流普通文档流普通文档流普通文档流普通文档流普通文档流普通文档流普通文档流普通文档流普通文档流</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>CSS代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.box</span> <span class="rules">&#123; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#00ff90</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.float-ele</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff6a00</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo1.jpg" alt="float基本效果" title="float基本效果"></p>
<p>由效果图可以看出，span元素周围的文字会围绕着span元素，而设置了float属性的span元素变成了一个块级元素的感觉，可以设置width和height属性。这是设置了float属性后的效果，关于float的详细细节，我们接下来详细讲解。</p>
<h3 id="float的详细细节">float的详细细节</h3><p>在说明float带来的详细细节之前，我们首先要了解一个概念。<br>包含块：浮动元素的包含块就是离浮动元素最近的块级祖先元素，前面叙述的例子中，div.box就是span元素的包含块。</p>
<p>了解完包含块的概念之后，首先要说明的浮动元素的第一个特性：不管一个元素是行内元素还是块级元素，如果被设置了浮动，那浮动元素会生成一个块级框，可以设置它的width和height，因此float常常用于制作横向配列的菜单，可以设置大小并且横向排列。</p>
<p>浮动元素的展示在不同情况下会有不同的规则，下面我们来一一说明这些规则。<br>1.浮动元素在浮动的时候，其margin不会超过包含块的padding<br>这一点很简单，浮动元素的浮动位置不能超过包含块的内边界<br>HTML代码<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"box"</span>&gt;</span><br><span class="line">        &lt;span <span class="type">class</span>=<span class="string">"rule1"</span>&gt;</span><br><span class="line">            浮动元素</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>CSS代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.box</span> <span class="rules">&#123; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#00ff90</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">400px</span></span></span>; &#125;</span></span><br><span class="line">        <span class="class">.rule1</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff6a00</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo2.jpg" alt="float规则一" title="float规则一"><br>这个例子中，box的padding是10px，浮动元素的margin是10px，合起来为20px，即浮动元素不会超过包含块的padding。<br>PS：如果想要元素超出，可以设置margin属性</p>
<p>2.如果有多个浮动元素，后面的浮动元素的margin不会超过前面浮动元素的margin<br>简单说就是如果有多个浮动元素，浮动元素会按顺序排下来而不会发生重叠的现象。<br>修改前面例子中的HTML代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"rule1"</span>&gt;</span></span><br><span class="line">            浮动元素1</span><br><span class="line">        <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"rule1"</span>&gt;</span></span><br><span class="line">            浮动元素2</span><br><span class="line">        <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"rule1"</span>&gt;</span></span><br><span class="line">            浮动元素3</span><br><span class="line">        <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo3.jpg" alt="float规则二" title="float规则二"></p>
<p>如图所示，浮动元素会一个一个排序下来而不会发生重叠现象。</p>
<p>3.如果两个元素一个向左浮动，一个向右浮动，左浮动元素的marginRight不会和右浮动元素的marginLeft相邻。<br>什么意思呢，我们要分两种情况来看。<br>（1）包含块的宽度大于两个浮动元素的宽度总和，举例如下：<br>HTML代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"rule1"</span>&gt;</span></span><br><span class="line">            浮动元素1</span><br><span class="line">        <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"rule2"</span>&gt;</span></span><br><span class="line">            浮动元素2</span><br><span class="line">        <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>CSS代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.box</span> <span class="rules">&#123; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#00ff90</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">400px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.rule1</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff6a00</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; &#125;</span></span><br><span class="line"><span class="class">.rule2</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff6a00</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo4.jpg" alt="float规则三情况1" title="float规则三情况1"></p>
<p>这种情况很简单：包含块元素的宽度足够大，两个元素一个向左浮动，一个向右浮动，井水不犯河水。</p>
<p>（2）包含块的宽度小于两个浮动元素的宽度总和<br>修改浮动元素的宽度为300px，CSS代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.rule1</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff6a00</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; &#125;</span></span><br><span class="line"><span class="class">.rule2</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff6a00</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo5.jpg" alt="float规则三情况2" title="float规则三情况2"></p>
<p>如果所示，如果包含块宽度不够高，后面的浮动元素将会向下浮动，其顶端是前面浮动元素的底端。</p>
<p>4.浮动元素顶端不会超过包含块的内边界底端，如果有多个浮动元素，下一个浮动元素的顶端不会超过上一个浮动元素的底端<br>这条规则简单说就是如果有多个浮动元素，后面的元素高度不会超过前面的元素，并且不会超过包含块。举例如下：<br>HTML代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">p</span>&gt;</span>在浮动元素之前在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"rule1"</span>&gt;</span></span><br><span class="line">            浮动元素1浮动元素1浮动元素1浮动元素1浮动元素1浮动元素1浮动元素1浮动元素1浮动元素1浮动元素1浮动元素1浮动元素1</span><br><span class="line">        <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">p</span>&gt;</span>在浮动元素之后在浮动元素之后在浮动元素之后在浮动元素之后在浮动元素之后在浮动元素之后在浮动元素之后在浮动元素之后<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"rule1"</span>&gt;</span></span><br><span class="line">            浮动元素2浮动元素2浮动元素2浮动元素2浮动元素2浮动元素2浮动元素2浮动元素2浮动元素2浮动元素2浮动元素2浮动元素2浮动元素2</span><br><span class="line">        <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>CSS代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.box</span> <span class="rules">&#123; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#00ff90</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">400px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.rule1</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff6a00</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">250px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; &#125;</span></span><br><span class="line"><span class="tag">p</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">20px</span></span></span>; <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">20px</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo6.jpg" alt="float规则四" title="float规则四"><br>如图所示，两个浮动元素，后面的浮动元素不会超过前面的浮动元素</p>
<p>5.如果有非浮动元素和浮动元素同时存在，并且非浮动元素在前，则浮动元素不会不会高于非浮动元素<br>这条规则也是显而易见的，在第4条规则中的例子，浮动元素有一个非浮动元素p，而浮动元素没有超过它。</p>
<p>6.浮动元素会尽可能地向顶端对齐、向左或向右对齐<br>在满足其他规则下，浮动元素会尽量向顶端对齐、向左或向右对齐，在第4条规则中的例子，浮动元素会尽可能靠近不浮动的p元素，左侧对齐<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo7.jpg" alt="float规则六" title="float规则六"></p>
<h3 id="float特殊情况">float特殊情况</h3><p>前面讨论了float需要遵守的一些规则，这些规则都是在比较常见的场景下展示的结果。下面我们来讨论一些不常见的情况。</p>
<h4 id="浮动元素的延伸性">浮动元素的延伸性</h4><p>在说浮动元素的延伸性之前，我们首先来考虑一个比较特殊的例子。<br>我们将span元素放在p元素内，并将其高度设置成高于p元素并且左浮动，这个例子的关键在浮动元素高度高于父元素。<br>HTML代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">        在浮动元素之前在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，</span><br><span class="line">        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"high-float"</span>&gt;</span></span><br><span class="line">            浮动元素比父级元素高</span><br><span class="line">        <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>在浮动元素之后在浮动元素之后在浮动元素之后在浮动元素之后在浮动元素之后在浮动元素之后在浮动元素之后在浮动元素之后<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>CSS代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">p</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">20px</span></span></span>; <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">20px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#00ff21</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.high-float</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">80px</span></span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">80px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value"> orangered</span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo8.jpg" alt="浮动元素高度大于父级元素" title="浮动元素高度大于父级元素"></p>
<p>在这个例子中，浮动元素高度高于父元素，可以看到浮动元素超出了父元素的底端。<br>这种情况要怎么解决呢，只要将父元素也设置成浮动即可，我们将第一个p元素设置成左浮动，效果如下<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo9.jpg" alt="浮动元素延伸性" title="浮动元素延伸性"></p>
<p>将父元素p设置成float:left后，浮动元素就会被包含到父元素里面，我们将这个特性成为浮动元素的延伸性。<br>浮动元素的延伸性是什么呢，我们可以将其理解为元素被设置成浮动后，该元素会进行延伸进而包含其所有浮动的子元素</p>
<h4 id="浮动元素超出父级元素的padding">浮动元素超出父级元素的padding</h4><p>在前面提到的第一条规则：浮动元素的外边界不会超过父级元素的内边界。大部分情况下，我们见到的场景都是符合的。但是有一些特殊情况。<br>（1）负margin<br>我们将浮动元素的margin-left设置成负数。<br>HTML代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">    在浮动元素之前在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，</span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"minus-margin"</span>&gt;</span></span><br><span class="line">        负margin-left</span><br><span class="line">    <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>CSS代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">p</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">20px</span></span></span>; <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">20px</span></span></span>; <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">50px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#00ff21</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.minus-margin</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">80px</span></span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">80px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value"> orangered</span></span>; <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">20px</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo10.jpg" alt="负maring的浮动元素" title="负maring的浮动元素"></p>
<p>将margin-left设置成负数之后，浮动的子元素明显超出了父元素的内边界，这难道不是违反了第一条规则吗？<br>但仔细想想，这其实是合理的，因为默认情况下marign-left就是0，所以不会超出父元素的内边界，但是将其设置成负数之后，就相当于浮动元素覆盖了自己的内边界一样。<br>我们在从数学的角度来看看这个问题，这个例子中：<br>父元素的margin-left:50px，padding和border默认为0，即内边界所在距离浏览器左侧的位置为50px。<br>浮动的子元素默认情况下距离浏览器左侧的像素应该为50px，但是将其设置成margin-left:20px后，浏览器会进行计算：<br>50px+（-20px）margin+0border+0padding=30px。距离浏览器左侧更近，所以超出了父元素。</p>
<p>（2）浮动元素宽度大于父级元素宽度<br>如果我们将浮动元素的宽度设置大于父级元素，效果会如何呢？<br>元素左浮动，width大于父级元素<br>HTML代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">    在浮动元素之前在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，</span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"big-width"</span>&gt;</span></span><br><span class="line">        width大于父级元素</span><br><span class="line">    <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>CSS代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">p</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">20px</span></span></span>; <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">20px</span></span></span>; <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">50px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#00ff21</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">250px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.big-width</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">80px</span></span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">80px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value"> orangered</span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo11.jpg" alt="大width的浮动元素" title="大width的浮动元素"></p>
<p>将浮动元素左浮动，并且宽度超出父级元素时，由于浮动元素宽度较大，它会超过父级元素的右内边界<br>如果将其设置成右浮动，情况又会怎么样呢？<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo12.jpg" alt="大width的浮动元素" title="大width的浮动元素"><br>可以看到，设置成右浮动后，会超出父级元素的左内边界。</p>
<h4 id="重叠问题">重叠问题</h4><p>重叠问题是指两个元素再同一个位置，会出现上下重叠的问题。浮动元素如果和普通文档流发生重叠会怎么样呢？<br>首先浮动元素要怎么样才会发生重叠呢，设置其margin-top为负数即可。我们看看例子：<br>HTML代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">span</span>&gt;</span></span><br><span class="line">            在浮动元素之前在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前。</span><br><span class="line">        <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"overlay"</span>&gt;</span></span><br><span class="line">            浮动元素重叠</span><br><span class="line">        <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>CSS代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">p</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">20px</span></span></span>; <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">20px</span></span></span>; <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">50px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#00ff21</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">250px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.overlay</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">80px</span></span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">80px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value"> orangered</span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>; <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> -<span class="number">30px</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo13.jpg" alt="浮动元素的重叠问题" title="浮动元素的重叠问题"><br>如果浮动元素不设置负margin时，是这样的<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo14.jpg" alt="浮动元素的重叠问题" title="浮动元素的重叠问题"></p>
<p>在这个例子中，可以看到p中正常流元素span的内容会显示在浮动元素上面。<br>我们给设置span设置背景图片试试，效果如下：<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo15.jpg" alt="浮动元素的重叠问题：有背景图" title="浮动元素的重叠问题：有背景图"></p>
<p>元素设置背景后，重叠的部分还是会显示背景</p>
<p>如果是span标签换成div标签会怎么样呢？<br>HTML代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"background-image:url(../images/banner1.jpg)"</span>&gt;</span></span><br><span class="line">         在浮动元素之前在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前，在浮动元素之前。</span><br><span class="line">     <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"overlay"</span>&gt;</span></span><br><span class="line">         浮动元素重叠</span><br><span class="line">     <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo16.jpg" alt="浮动元素的重叠问题：块级元素有背景图" title="浮动元素的重叠问题：块级元素有背景图"><br>这种情况下，重叠的部分不会显示背景图片。</p>
<p>总结一下这两种情况的区别：<br>1、行内元素与浮动元素发生重叠，其边框，背景和内容都会显示在浮动元素之上<br>2、块级元素与浮动元素发生重叠时，边框和背景会显示在浮动元素之下，内容会显示在浮动元素之上</p>
<h3 id="clear属性">clear属性</h3><p>有的时候，我们不希望一些元素会被旁边的浮动元素影响到，这个时候就需要用到clear属性了。<br>clear属性：确保当前元素的左右两侧不会有浮动元素。<br>我们举个例子进行说明：<br>假设有3个浮动的div如下所示：<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo17.jpg" alt="3个浮动元素" title="浮动元素的重叠问题：3个浮动元素"></p>
<p>它的HTML代码和CSS代码如下<br>HTML代码：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"box"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"float"</span>&gt;浮动元素<span class="number">1</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"float"</span>&gt;浮动元素<span class="number">2</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"float"</span>&gt;浮动元素<span class="number">3</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>CSS代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class">.float</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">150px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#0094ff</span></span></span>; <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid red</span></span>; <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">5px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.cl</span> <span class="rules">&#123; <span class="rule"><span class="attribute">clear</span>:<span class="value"> left</span></span>; &#125;</span></span><br><span class="line"><span class="class">.cr</span> <span class="rules">&#123; <span class="rule"><span class="attribute">clear</span>:<span class="value"> right</span></span>; &#125;</span></span><br><span class="line"><span class="class">.cb</span> <span class="rules">&#123; <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>假设有我们有想让第二个浮动元素另起一行进行浮动，那该怎么做呢？<br>根据clear属性的定义：确保当前元素的左右两侧不会有浮动元素。<br>我们对第一个浮动元素添加clear:right保证其右侧不会有浮动元素。修改HTML代码如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"box"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"float cr"</span>&gt;浮动元素<span class="number">1</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"float"</span>&gt;浮动元素<span class="number">2</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"float"</span>&gt;浮动元素<span class="number">3</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>查看效果发现没有什么变化<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo17.jpg" alt="第1个元素清除浮动" title="浮动元素的重叠问题：第1个元素清除浮动"></p>
<p>这种方法是错误的！！</p>
<p>那我们试试给第二个元素添加clear:left保证其左侧不会出现浮动元素。修改HTML代码如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"box"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"float"</span>&gt;浮动元素<span class="number">1</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"float cl"</span>&gt;浮动元素<span class="number">2</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"float"</span>&gt;浮动元素<span class="number">3</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo18.jpg" alt="第2个元素清除浮动" title="浮动元素的重叠问题：第2个元素清除浮动"><br>可以看到这次clear属性有效果了。</p>
<p>同样是设置clear属性，为什么会出现这样的结果呢？<br>使用clear属性的时候要记住：<strong>clear只对元素本身的布局起作用</strong>。<br>在前面的例子中，第一个浮动元素添加了clear属性，它并不会影响到其他元素的布局，只会影响自己，所以第二个浮动元素并不会另起一行。<br>而第二个浮动元素设置了clear后，我们可以看到clear作用于自己，所以元素另起一行。</p>
<h3 id="清除浮动">清除浮动</h3><p>清除浮动是一个经常提到的东西，首先我们要理解使用浮动会带来什么问题，以及为什么要清除浮动。<br>我们知道，一个块级元素如果没有设置height，其height是由子元素撑开的。对子元素使用了浮动之后，子元素会脱离标准文档流，也就是说，父级元素中没有内容可以撑开其高度，这样父级元素的height就会被忽略，这就是所谓的高度塌陷。要解决这样的问题，我们就是要使用清除浮动。<br>清除浮动有很多方法，下面我们一一说明每一种方法。</p>
<p>对于IE浏览器来说，要清除浮动带来的问题，只需要触发器hasLayout就可以，直接设置样式zoom:1就可以触发。关于hasLayout的知识，这里暂不详述，以后我们专门来讲讲这个东西，感兴趣的同学可以先查查相关资料。</p>
<p>对于非IE浏览器，主要有下面几种方法：</p>
<h4 id="增加额外的div">增加额外的div</h4><p>这是最简单直接的方法，哪里有浮动元素，就在其父级元素后增加一个<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> style=<span class="string">"clear:both"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>这样就会清除浮动元素带来的问题。<br>优点：简单直接，初学者常常使用的方法，也易于理解<br>缺点：增加额外的无意义标签，不利于语义化，每次清除都要添加额外的空标签，造成浪费</p>
<h4 id="父级元素添加overflow:hidden">父级元素添加overflow:hidden</h4><p>这个方法的关键在于触发了BFC，BFC是CSS中的难点之一，我们以后专门来学习这个概念。现在只需要知道它可以清除浮动带来的影响。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.clearfix</span><span class="rules">&#123;<span class="rule"><span class="attribute">overflow</span>:<span class="value">hidden</span></span>;<span class="rule"><span class="attribute">zoom</span>:<span class="value"><span class="number">1</span>&#125;</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>优点：代码量少，没有额外的标签<br>缺点：如果子元素超出父元素的范围，会造成超出的部分被隐藏</p>
<h4 id="after伪元素">after伪元素</h4><p>after表示子元素的后面，通过它可以设置一个具有clear的元素，然后将其隐藏<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">clearfix</span>:<span class="value">&#123;</span><br><span class="line">    zoom:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">clearfix:after&#123;</span><br><span class="line">    display:block</span></span>; <span class="rule"><span class="attribute">content</span>:<span class="value"><span class="string">''</span></span></span>; <span class="rule"><span class="attribute">clear</span>:<span class="value">both</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">0</span></span></span>; <span class="rule"><span class="attribute">visibility</span>:<span class="value">hidden</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种方法的原理和第一个方法一样，就是生成一个元素来清除浮动，只是这个元素是“假的”。<br>优点：没有额外标签，综合起来算是比较好的方法<br>缺点：稍显复杂，但是理解其原理后也挺简单的<br>推荐使用这种方法。</p>
<h3 id="float的应用">float的应用</h3><p>说了这么多float的原理和可能造成的问题，接下来我们就要谈谈float的应用。</p>
<h4 id="文字环绕效果">文字环绕效果</h4><p>float最初的应用就是文字环绕效果，这对图文并茂的文章很有用。我们简单的距离说明一下：<br>HTML代码<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"box"</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">"1.jpg"</span> <span class="type">class</span>=<span class="string">"float"</span> /&gt;</span><br><span class="line">        我是环绕的文字我是环绕的文字我是环绕的文字我是环绕的文字我是环绕的文字我是环绕的文字我是环绕的文字我是环绕的文字我是环绕的文字我是环绕的文字我是环绕的文字我是环绕的文字我是环绕的文字我是环绕的文字我是环绕的文字</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>CSS代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.box</span> <span class="rules">&#123; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#00ff90</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>; &#125;</span>  </span><br><span class="line"><span class="class">.float</span> <span class="rules">&#123;<span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#0094ff</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;<span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid red</span></span>;<span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;<span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">5px</span></span></span>;<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">400px</span></span></span>;&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo19.jpg" alt="文字环绕效果" title="文字环绕效果"></p>
<p>这样很轻松的实现了文字环绕效果。</p>
<h4 id="横向菜单排列">横向菜单排列</h4><p>在之前提到的display:inline的文章<a href="http://luopq.com/2015/11/01/display-inline-block/">详解CSS display:inline-block的应用</a>中，我们提到了横向排列菜单的实现，最早是利用float属性来实现的，它可以很简单的实现横向菜单的效果。<br>HTML代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"menu clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span>政治<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span>娱乐<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span>体育<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span>游戏<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>CSS代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">.clearfix</span>:<span class="value"> &#123; zoom: <span class="number">1</span></span></span>; &#125;</span><br><span class="line">    <span class="rule"><span class="attribute">.clearfix</span>:<span class="value">after &#123; display: block</span></span>; <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">''</span></span></span>; <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">visibility</span>:<span class="value"> hidden</span></span>; &#125;</span><br><span class="line"><span class="class">.menu</span> <span class="rules">&#123; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#0094ff</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>; &#125;</span></span><br><span class="line">    <span class="class">.menu</span> <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>; <span class="rule"><span class="attribute">list-style-type</span>:<span class="value"> none</span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图：<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo20.jpg" alt="横向菜单" title="横向菜单"><br>这种方式可以很轻松的实现横向菜单效果，但需要注意的是要注意清除浮动，推荐使用display:inline-block来实现</p>
<h4 id="布局">布局</h4><p>float最经常使用的场景就是布局。使用float可以很简单的实现布局，而且易于理解。下面我们来实现一个三栏两列的固定布局。<br>HTML代码：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"header"</span>&gt;</span><br><span class="line">    我是头部</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"content clearfix"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"side"</span>&gt;左侧&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"main"</span>&gt;</span><br><span class="line">        右侧</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"footer"</span>&gt;</span><br><span class="line">    我是底部</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>CSS代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">.clearfix</span>:<span class="value"> &#123; zoom: <span class="number">1</span></span></span>; &#125;</span><br><span class="line">    <span class="rule"><span class="attribute">.clearfix</span>:<span class="value">after &#123; display: block</span></span>; <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">''</span></span></span>; <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">visibility</span>:<span class="value"> hidden</span></span>; &#125;</span><br><span class="line"><span class="class">.header</span>, <span class="class">.footer</span> <span class="rules">&#123; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#0094ff</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; &#125;</span></span><br><span class="line"><span class="class">.content</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">1000px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#000000</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.side</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">500px</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">280px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff006e</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.main</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">500px</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">700px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#fbcfcf</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>效果图<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/CSS-float-Demo21.jpg" alt="三栏两列布局" title="三栏两列布局"><br>这就是一个很常见的布局，要注意的就是清除浮动的问题。</p>
<p>float常见的应用大概是这几种，当然它存在着更多的应用等待着大家去挖掘，欢迎交流！！</p>
<h3 id="总结">总结</h3><p>float属性是一个频繁用到的属性，要用好它就要理解它的特性，否则容易云里雾里搞不清楚状况。关于float，最重要的是要理解下面几点：<br>1.float会造成元素脱离文档流<br>2.float影响元素的几个规则<br>3.浮动带来的问题以及如何清除浮动</p>
]]></content>
    <summary type="html">
    <![CDATA[CSS中的float属性是一个频繁用到的属性，对于初学者来说，如果没有理解好浮动的意义和表现出来的特性，在使用的使用很容易陷入困惑，云里雾里，搞不清楚状态。本文将从最基本的知识开始说起，谈谈关于浮动的应用，出现的问题和解决方案。]]>
    
    </summary>
    
      <category term="CSS" scheme="http://luopq.com/tags/CSS/"/>
    
      <category term="Web前端" scheme="http://luopq.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript设计模式理论与实战：简单工厂模式]]></title>
    <link href="http://luopq.com/2015/11/03/design-pattern-factory/"/>
    <id>http://luopq.com/2015/11/03/design-pattern-factory/</id>
    <published>2015-11-02T16:35:48.000Z</published>
    <updated>2015-11-02T16:58:46.886Z</updated>
    <content type="html"><![CDATA[<p>通常我们创建对象最常规的方法就是使用new关键字调用构造函数，这会导致对象之间的依赖性。工厂模式是一种有助于消除类之间依赖性的设计模式，它使用一个方法来决定要实例化哪一个类。本文详细介绍了简单工厂模式的理论，并且举例说明了简单工厂模式的具体应用。</p>
<h4 id="基本介绍">基本介绍</h4><p>简单工厂模式是工厂模式中最基本的一种。通过定义一个工厂类，根据参数实例化具体的某个产品类。</p>
<h4 id="举例说明">举例说明</h4><p>我们举个例子进行说明：假设我们开发一个旅游行业网站，网站上面销售机票，酒店等产品。一个用户准备购买一张机票。我们可以定义相关类如下：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> productEnums = &#123;</span><br><span class="line">    flight: <span class="string">"flight"</span>,</span><br><span class="line">    hotel: <span class="string">"hotel"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"This is Flight"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hotel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"This is Hotel"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.shopCart = [];</span><br><span class="line">&#125;</span><br><span class="line">User.prototype = &#123;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>: User,</span><br><span class="line">    order: function (productType) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> product = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (productType) &#123;</span><br><span class="line">            <span class="keyword">case</span> productEnums.flight:</span><br><span class="line">                product = <span class="keyword">new</span> Flight();</span><br><span class="line">            <span class="keyword">case</span> productEnums.hotel:</span><br><span class="line">                product = <span class="keyword">new</span> Hotel();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.shopCart.push(product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User();</span><br><span class="line">user.order(productEnums.flight);</span><br></pre></td></tr></table></figure></p>
<p>这段代码定义了三个类：用户类User，机票类Flight，酒店类Hotel，其中User包含预订方法。用户预订的时候直接传入产品类型即可。这段代码乍一看没什么问题，但是需求和业务是随时变化的，如果公司业务扩展，增加了签证业务，我们就要去修改User类来保证它支持签证。我们当然可以这么做，但直接去修改User类有什么不好呢，有没有更好的方法呢？<br>首先要说的是User类，这个类是表示用户类，而用户类本质上跟具体的某一类业务是无关的，也就是说，业务有可能随时增加，但是用户关于业务方面的代码也就是创建产品订单。新增的签证业务本质上和已经存在的机票和酒店没有什么区别，如果每增加一种业务就要去修改User类，这对代码的稳定性和可维护性大大的不好，更好的解决方法是有一个专门的创建订单的类在管理不同的业务，这个类就是简单工厂。<br>我们修改代码如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> productFactory = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> productFactories = &#123;</span><br><span class="line">        <span class="string">"flight"</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Flight();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"hotel"</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Hotel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        createProduct: <span class="function"><span class="keyword">function</span> <span class="params">(productType)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> productFactories[productType]();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">User.prototype = &#123;</span><br><span class="line">    constructor: User,</span><br><span class="line">    order: <span class="function"><span class="keyword">function</span> <span class="params">(productType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shopCart.push(productFactory.createProduct(productType));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这段代码主要修改的地方有两点：<br>（1）增加了一个产品工厂，根据不同的产品类型返回不同的对象<br>（2）修改User类的order方法为调用工厂类中的创建产品方法。<br>这样做的好处是：<br>（1）使User的order方法更加专注，只做预订产品这一功能，而提取创建产品订单到专门的工厂类中，代码更简洁清晰<br>（2）一个专门管理product的factory，添加新产品很容易，不用再去修改User类</p>
<h4 id="总结说明">总结说明</h4><p>简单工厂模式的主要特点是将对象的创建和使用进行了分离，主要有3个部分组成：<br>1.对象使用类，该类是被工厂创造出来的使用者，与对象的种类和创建过程无关<br>2.工厂类，工厂类根据传入的参数创建不同的对象并返回给对象使用类，包含了不同对象的创建过程，如果有不同的对象，则要修改该类<br>3.对象类，不同业务产生的不同类，就是工厂生产的产品</p>
<h5 id="简单工厂模式优点">简单工厂模式优点</h5><p>1.工厂类集中了所有对象的创建，便于对象创建的统一管理<br>2.对象的使用者仅仅是使用产品，实现了单一职责<br>3.便于扩展，如果新增了一种业务，只需要增加相关的业务对象类和工厂类中的生产业务对象的方法，不需要修改其他的地方。</p>
<h5 id="适用场景">适用场景</h5><p>1.需要根据不同参数产生不同实例，这些实例有一些共性的场景<br>2.使用者只需要使用产品，不需要知道产品的创建细节</p>
<p>注意：除非是适用场景，否则不可滥用工厂模式，会造成代码的复杂度。</p>
]]></content>
    <summary type="html">
    <![CDATA[通常我们创建对象最常规的方法就是使用new关键字调用构造函数，这会导致对象之间的依赖性。工厂模式是一种有助于消除类之间依赖性的设计模式，它使用一个方法来决定要实例化哪一个类。本文详细介绍了简单工厂模式的理论，并且举例说明了简单工厂模式的具体应用。]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://luopq.com/tags/Javascript/"/>
    
      <category term="设计模式" scheme="http://luopq.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Web前端" scheme="http://luopq.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[详解CSS display:inline-block的应用]]></title>
    <link href="http://luopq.com/2015/11/01/display-inline-block/"/>
    <id>http://luopq.com/2015/11/01/display-inline-block/</id>
    <published>2015-11-01T05:02:11.000Z</published>
    <updated>2015-11-02T16:56:44.337Z</updated>
    <content type="html"><![CDATA[<p>本文详细描述了display:inline-block的基础知识，产生的问题和解决方法以及其常见的应用场景，加深了对inline-block应用的进一步理解。</p>
<h3 id="基础知识">基础知识</h3><p>display:inline-block是什么呢？相信大家对这个属性并不陌生，根据名字inline-block我们就可以大概猜出它是结合了inline和block两者的特性于一身，简单的说：设置了inline-block属性的元素既拥有了block元素可以设置width和height的特性，又保持了inline元素不换行的特性。</p>
<p>举例说明：以前我们做横向菜单列表的时候，我们可以通过li和float:left两者来实现，现在可以通过li和display:inline-block。</p>
<blockquote>
<p>HTML代码</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            首页</span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            关于</span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            热点</span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            联系我们</span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>CSS代码：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ul</span>, <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">list-style-type</span>:<span class="value"> none</span></span>; &#125;</span></span><br><span class="line">        <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>; <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图：</p>
</blockquote>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo1.jpg" alt="inline-block基本效果"></p>
<p>可以看到li元素可以横向排列，并且可以设置width属性，大家可以复制代码自己查看效果或查看<a href="http://runjs.cn/code/2qc4sp6i" target="_blank" rel="external">Demo</a></p>
<h3 id="inline-block的问题">inline-block的问题</h3><p>观察上面的例子，细心的同学肯定会发现，每个li之间有一个小空隙，而我们的代码中并没有设置margin等相关属性，这是为什么呢？</p>
<h4 id="默认的inline元素">默认的inline元素</h4><p>首先，我们观察一下默认的inline元素的表现：</p>
<blockquote>
<p>HTML代码</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span>&gt;</span>首页<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span>&gt;</span>热点<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>CSS代码</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">a</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图</p>
</blockquote>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo2.jpg" alt="inline默认情况"></p>
<p>默认情况下，inline元素之间就有空隙出现，所以结合了inline和block属性的inline-block属性自然也有这个特点。<br>那这些空隙是什么呢，它们是空白符！</p>
<h4 id="消除空白符">消除空白符</h4><p>在浏览器中，空白符是不会被浏览器忽略的，多个连续的空白符浏览器会自动将其合并成一个。我们编写代码时写的空格，换行都会产生空白符。所以自然而然的两个元素之间会有空白符，如果将上述例子中的a标签写成一行，空白符消失，菜单之间也就紧凑起来了。</p>
<p>空白符虽然是浏览器正常的表现行为，但是通常情况下，设计师同学的设计稿不会出现这些空隙，我们在还原设计稿的时候，怎么去除掉这些空隙呢。<br>要去除空白符产生的间隙，首先要理解空白符归根结底是个字符，通过设置font-size属性可以控制产生的间隙的大小。<br>首先我们将font-size设置成50px试试，修改CSS代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ul</span>, <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">list-style-type</span>:<span class="value"> none</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">50px</span>&#125;</span><br><span class="line">        li &#123; display: inline-block</span></span>; <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;<span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">12px</span> &#125;</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>我们修改ul的font-size为50px，而li的font-size为12px保持原来的字体大小，效果如下：<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo3.jpg" alt="font-size:50px的空隙"><br>可以看到菜单之间的空隙变大了。<br>接着我们设置font-site属性为0px，代码如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ul</span>, <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">list-style-type</span>:<span class="value"> none</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">0px</span>&#125;</span><br><span class="line">        li &#123; display: inline-block</span></span>; <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;<span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">12px</span> &#125;</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo4.jpg" alt="font-size:0的空隙"><br>可以看到菜单之间的空隙没有了，大家可以自行查看<a href="http://runjs.cn/code/2qc4sp6i" target="_blank" rel="external">Demo</a></p>
<h4 id="兼容性问题">兼容性问题</h4><p>在IE8+，FF和Chrome的浏览器，inline-block可以完美的兼容，考虑到IE6和IE7等低版本浏览器的占用率，虽然有办法可以兼容，但本文不再赘述，大家有兴趣的可以查找相关资料。</p>
<h3 id="inline-block的应用">inline-block的应用</h3><p>inline-block的应用什么场景有哪些呢？我们大家考虑一个技术的应用场景时，首先一定要思考的是技术的特性和需求是否符合。inline-block的特点是结合inline和block两种属性的特性，可以设置width和height，并且元素保持行内排列的特性，基于这一点，所有行内排列并且可以设置大小的场景都是我们可以考虑使用inline-block的应用场景。下面举例说明：</p>
<h4 id="网页头部菜单">网页头部菜单</h4><p>网页头部的菜单就是典型的横向排列并且需要设置大小的应用，在inline-block之前，实现菜单基本都是用float属性来实现，float属性会造成高度塌陷，需要清除浮动等问题，使用inline-block实现就不需要在意这样的问题。代码如下：</p>
<blockquote>
<p>HTML代码：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>服装城<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>美妆馆<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>超市<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>全球购<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>闪购<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>团购<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>拍卖<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>金融<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>智能<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>CSS代码</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">a</span>, <span class="tag">ul</span>, <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">list-style-type</span>:<span class="value"> none</span></span>; &#125;</span></span><br><span class="line"><span class="tag">a</span> <span class="rules">&#123; <span class="rule"><span class="attribute">text-decoration</span>:<span class="value"> none</span></span>; <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#333</span></span></span>; &#125;</span> </span><br><span class="line"><span class="class">.header</span> <span class="tag">ul</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; &#125;</span></span><br><span class="line">       <span class="class">.header</span> <span class="tag">li</span> <span class="rules">&#123; <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">16px</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">80px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图</p>
</blockquote>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo5.jpg" alt="京东首页导航菜单"></p>
<p>这是模仿京东首页头部导航菜单的实现，使用inline-block可以很简单的实现横向菜单列表</p>
<h4 id="内联块元素">内联块元素</h4><p>除了菜单之外，一切需要行内排列并且可设置大小的需求就可以用inline-block来实现。<br>例如使用a标签做按钮时，需要设置按钮的大小，我们就可以使用inline-block来实现。</p>
<blockquote>
<p>HTML代码：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">    点击右边的按钮直接购买</span><br><span class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">class</span>=<span class="value">"button"</span>&gt;</span></span><br><span class="line">        购买</span><br><span class="line">    <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>CSS代码：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.button</span> <span class="rules">&#123; <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">150px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">45px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#b61d1d</span></span></span>; <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">45px</span></span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">20px</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图</p>
</blockquote>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo6.jpg" alt="a标签菜单"></p>
<h4 id="布局">布局</h4><p>inline-block也可以用于常见的布局，使用它就不需要去注意float属性布局带来的问题。<br>举例说明，创建一个常见的3列布局。</p>
<blockquote>
<p>HTML代码：</p>
</blockquote>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"wrap"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"header"</span>&gt;</span><br><span class="line">        网页头部</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"content"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"left"</span>&gt;</span><br><span class="line">            左侧</span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"center"</span>&gt;</span><br><span class="line">            中间</span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"right"</span>&gt;</span><br><span class="line">            右侧</span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"footer"</span>&gt;</span><br><span class="line">        网页底部</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CSS代码</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span>, <span class="tag">div</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.header</span>, <span class="class">.footer</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ccc</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">120px</span></span></span>; <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">120px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.content</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff6a00</span></span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">1000px</span></span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">0</span></span></span>; &#125;</span></span><br><span class="line">    <span class="class">.content</span> <span class="class">.left</span>, <span class="class">.content</span> <span class="class">.center</span>, <span class="class">.content</span> <span class="class">.right</span> <span class="rules">&#123; <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">16px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">400px</span></span></span>; &#125;</span></span><br><span class="line">    <span class="class">.content</span> <span class="class">.left</span>, <span class="class">.content</span> <span class="class">.right</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>; &#125;</span></span><br><span class="line">    <span class="class">.content</span> <span class="class">.center</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">600px</span></span></span>; <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#00ffff</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图：</p>
</blockquote>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/displayInlineBlock-demo7.jpg" alt="inline-block的三列布局"><br>这个例子使用了inline-block做出了常见的网页布局。</p>
<p>关于inline-block的应用，只要是从左到右，从上到下，并且需要设置大小的列表都可以用它来实现，而这种需求是非常常见的，相比于float，我更推荐inline-block。inline-block的应用应该还有很多，大家可以多多挖掘出来。</p>
<h3 id="总结">总结</h3><p>相比于使用float所带来的问题，使用inline-block所需要注意的点主要是空白符带来的问题，这一点也可以很方便的解决。<br>使用inline-block可以很方便的进行列表布局，更加符合我们的思维习惯，相信使用它的同学们也会越来越多，欢迎大家讨论。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文详细描述了display:inline-block的基础知识，产生的问题和解决方法以及其常见的应用场景，加深了对inline-block应用的进一步理解。]]>
    
    </summary>
    
      <category term="CSS" scheme="http://luopq.com/tags/CSS/"/>
    
      <category term="Web前端" scheme="http://luopq.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript设计模式理论与实战：单例模式]]></title>
    <link href="http://luopq.com/2015/10/27/design-pattern-singleton/"/>
    <id>http://luopq.com/2015/10/27/design-pattern-singleton/</id>
    <published>2015-10-27T14:19:11.000Z</published>
    <updated>2015-11-02T16:59:30.099Z</updated>
    <content type="html"><![CDATA[<p>在Javascript中，单例模式是一种最基本又经常用到的设计模式，可能在不经意间就用到了单例模式。<br>本文将从最基础的理论开始，讲述单例模式的基本概念和实现，最后用一个例子来讲述单例模式的应用。</p>
<h3 id="理论基础">理论基础</h3><h4 id="概念">概念</h4><p>单例模式，顾名思义就是只有一个实例存在。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。</p>
<h4 id="基本结构">基本结构</h4><p>最简单的单例模式起始就是一个对象字面量，它将有关联的属性和方法组织到一起。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleton = &#123;</span><br><span class="line">    prop:<span class="string">"value"</span>,</span><br><span class="line">    <span class="keyword">method</span>:function()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种形式的单例模式，所有成员都是公开的，都可以通过singleton来访问。这样的缺点是单例中有一些辅助的方法并不希望暴露给使用者，如果使用者用了这些方法，然后在后面维护的时候，一些辅助方法被删除，这样会造成程序错误。<br>如何避免这样从的错误呢？</p>
<h4 id="包含私有成员的单例模式">包含私有成员的单例模式</h4><p>要怎么在类中创建私有成员呢，这通过需要闭包来进行实现，关于闭包的知识，本文不再赘述，大家可以自行Google。<br>基本形式如下：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleton = (function () &#123;</span><br><span class="line">            <span class="keyword">var</span> privateVar = <span class="string">"private"</span>;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                prop: <span class="string">"value"</span>,</span><br><span class="line">                <span class="keyword">method</span>: function () &#123;</span><br><span class="line">                    console.log(privateVar);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br></pre></td></tr></table></figure></p>
<p>首先是一个自执行的匿名函数，在匿名函数中，声明了一个变量privateVar，返回一个对象赋值给单例对象singleton。在匿名函数外部无法访问到privateVar变量，它就是单例对象的私有变量，只能在函数内部或通过暴露出来的方法去访问这个私有变量。这种形式又被成为模块模式。</p>
<h4 id="惰性实例化">惰性实例化</h4><p>不管是直接字面量或者私有成员的单例模式，两者都是在脚本加载时就被创建出来的单例，但是有时候，页面可能永远也用不到这个单例对象，这样会造成资源浪费。对于这种情况，最佳的处理方式就是惰性加载，就是说在需要的时候才去真正实例化这个单例对象，如何实现呢？<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var singleton =<span class="function"> (</span>function<span class="function"> (</span><span class="function">)</span> &#123;</span><br><span class="line">            function<span class="function"> init(</span><span class="function">)</span> &#123;</span><br><span class="line">                var<span class="keyword"> private</span>Var = <span class="string">"private"</span>;</span><br><span class="line">               <span class="instruction"> return </span>&#123;</span><br><span class="line">                    prop: <span class="string">"value"</span>,</span><br><span class="line">                    method: function<span class="function"> (</span><span class="function">)</span> &#123;</span><br><span class="line">                       <span class="function"> console.log(</span>privateVar<span class="function">)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            var<span class="instruction"> instance </span>= null;</span><br><span class="line">           <span class="instruction"> return </span>&#123;</span><br><span class="line">                getInstance: function<span class="function"> (</span><span class="function">)</span> &#123;</span><br><span class="line">                   <span class="instruction"> if </span>(!instance<span class="function">)</span> &#123;</span><br><span class="line">                       <span class="instruction"> instance </span>=<span class="function"> init(</span><span class="function">)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                   <span class="instruction"> return </span>instance;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">       <span class="function"> &#125;)(</span><span class="function">)</span>;</span><br></pre></td></tr></table></figure></p>
<p>首先将创建单例对象的代码封装到init函数中，然后声明一个私有变量instance表示单例对象的实例，公开一个方法getInstance来获取单例对象。<br>调用的时候就通过singleton.getInstance()来进行调用，单例对象是在调用getInstance的时候才真正被创建。</p>
<h4 id="适用场合">适用场合</h4><p>单例模式是JS中最常使用的设计模式，从增强模块性和代码组织性等方面来说，应该尽可能的使用单例模式。它可以把相关代码组织到一起便于维护，对于大型项目，每个模块惰性加载可以提高性能，隐藏实现细节，暴露出常用的api。常见的类库比如underscore，jQuery我们都可以将其理解为单例模式的应用。</p>
<h3 id="结合实战">结合实战</h3><p>前面已经讲过，单例模式是最常用的设计模式之一，我们来举个例子进行说明，<br>下面的代码主要实现一个简单的日期帮助类，通过单例模式实现：</p>
<h4 id="基本的单例模式结构">基本的单例模式结构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dateTimeHelper = &#123;</span><br><span class="line">            now: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            &#125;,</span><br><span class="line">            format: <span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> date.getFullYear() + <span class="string">"-"</span> + (date.getMonth() + <span class="number">1</span>) + <span class="string">"-"</span> + date.getDate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dateTimeHelper.now());</span><br></pre></td></tr></table></figure>
<p>这段代码通过对象字面量实现单例模式，使用的时候直接调用方法即可。</p>
<h4 id="惰性加载实现单例模式">惰性加载实现单例模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> dateTimeHelper = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    now: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">                    &#125;,</span><br><span class="line">                    format: <span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> date.getFullYear() + <span class="string">"-"</span> + (date.getMonth() + <span class="number">1</span>) + <span class="string">"-"</span> + date.getDate();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                getInstance: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">                        instance = init();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> instance;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();  </span><br><span class="line"><span class="built_in">console</span>.log(dateTimeHelper.getInstance().now())</span><br></pre></td></tr></table></figure>
<p>这就是惰性加载的单例模式。</p>
<h3 id="总结">总结</h3><p>单例模式的好处在于对代码的组织作用，将相关的属性和方法封装在一个不会被多次实例化的对象中，让代码的维护和调试更加轻松。隐藏了实现细节，可以防止被错误修改，还防止了全局命名空间的污染。另外可以通过惰性加载提高性能，减少不必要的内存消耗。</p>
]]></content>
    <summary type="html">
    <![CDATA[在Javascript中，单例模式是一种最基本又经常用到的设计模式，可能在不经意间就用到了单例模式。本文将从最基础的理论开始，讲述单例模式的基本概念和实现，最后用一个例子来讲述单例模式的应用。]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://luopq.com/tags/Javascript/"/>
    
      <category term="设计模式" scheme="http://luopq.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Web前端" scheme="http://luopq.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[详解CSS盒模型]]></title>
    <link href="http://luopq.com/2015/10/26/CSS-Box-Model/"/>
    <id>http://luopq.com/2015/10/26/CSS-Box-Model/</id>
    <published>2015-10-26T08:41:05.000Z</published>
    <updated>2015-11-09T16:14:09.968Z</updated>
    <content type="html"><![CDATA[<p>本文主要是学习CSS盒模型的笔记，总结了一些基本概念，知识点和细节。</p>
<h3 id="一些基本概念">一些基本概念</h3><p>HTML的大多数元素都是块级(block)元素或行内(inline)元素</p>
<h4 id="块级元素">块级元素</h4><p>默认情况下，块级元素会另起一行，并尽可能的充满整个容器。<br>块级元素可以包含行内元素和其他块级元素，相比于行内元素可以创建更复杂和大型的结构</p>
<h5 id="块级元素列表：">块级元素列表：</h5><p>html5新增的元素：<br>figcation：图文信息组标题 ，article：文章，figure：图文信息组<br>output：表单输出，aside：侧栏内容，footer：区段尾或页尾，audio：音频播放<br>video：视频播放，section：页面区段，canvas：画布、绘制图形，header：区段头或页头<br>hgroup：标题组，</p>
<p>address：联系方式信息，ol：有序列表，p：行，form：表单，pre：预格式化文本，blockqute：块引用<br>h1-h6：标题，table：表格，dd：列表中条目描述，dl：定义列表，div，hr：水平分割线</p>
<h4 id="行内元素">行内元素</h4><p>行内元素不会另起一行只占据它对应的标签的边框所包含内容的空间，<br>只能包含数据和其他行内元素</p>
<h5 id="行内元素列表">行内元素列表</h5><p>b，big，i，small，tt，<br>abbr，acronym，cite，code，dfn，em，kbd，strong，samp，var，<br>a，bdo，br，img，map，object，q，script，span，sub，sup，<br>button，input，label，select，textarea</p>
<h4 id="块级元素和行内元素的区别">块级元素和行内元素的区别</h4><p>块级元素：<br>1.会另起一行，<br>2.可以设置width，height，margin，padding，border属性<br>3.默认宽度是容器的100%</p>
<p>行内元素：<br>1.和其他元素在同一行内<br>2.高度和宽度就是内容的高度和宽度<br>3.可以设置margin-left和margin-right属性，无法设置margin-top和margin-bottom属性<br>4.border和padding可以设置，但是border-top和padding-top到页面顶部后就不再增加</p>
<h4 id="正常流">正常流</h4><p>正常流指：从左到右，从上到下显示。要让一个元素不在正常流中，唯一的办法是让元素浮动或定位</p>
<h4 id="非替换元素">非替换元素</h4><p>如果元素的内容包含在文档中，则称之为非替换元素。比如一个段落的文本都在该元素本身之内，这个段落就是一个非替换元素。</p>
<h4 id="替换元素">替换元素</h4><p>作为其他内容占位符的一个元素称为替换元素，根据标签和属性的值来显示内容的元素。比如img元素，它只是指向一个图像文件，这个文件插入到文档流中。大多数表单元素（input，根据type属性来显示内容）也是替换元素。</p>
<h4 id="根元素">根元素</h4><p>位于文档树的顶端，在html文档中就是html元素</p>
<h3 id="盒模型">盒模型</h3><p>html文档中的每个元素都被描绘成矩形盒子，这些矩形盒子通过一个模型来描述其占用空间，这个模型称为盒模型。盒模型通过四个边界来描述：margin（外边距），border（边框），padding（内边距），content（内容区域），如图所示：<br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model.jpg" alt="CSS盒模型" title="CSS盒模型"></p>
<h4 id="几点提示">几点提示</h4><p>1.padding，border，margin都是可选的，默认值为0，但是浏览器会自行设置元素的margin和padding，通过在css样式表中设置<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*<span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span></span><br><span class="line">&#125;</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>来覆盖浏览器样式。注意：这里的*表示所有元素，但是这样性能不好，建议一次列出常用的元素来设置</p>
<p>2.如果给元素设置背景，并且边框的颜色为透明，背景将应用于内容，内边距和边框组成的区域。</p>
<p>3.浏览器兼容性<br>一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。<br>根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。<br>不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。</p>
<h4 id="水平格式化">水平格式化</h4><h5 id="非替换元素的水平格式化">非替换元素的水平格式化</h5><p>水平格式化的7大属性是：margin-left，border-left，padding-left，width，padding-right，border-right，margin-right。这7个属性值加起来往往是父级元素的width值。</p>
<p>其中margin-left，width，margin-right可以设置为auto。<br>主要有下面几种情况：</p>
<h6 id="一个属性设置成auto">一个属性设置成auto</h6><p>如果三个属性中某个属性设置了auto，其余两个为特定的值，那么设置auto的属性为确定所需的元素，从而使得元素框的宽度等于父级元素的width。</p>
<blockquote>
<p>例子</p>
</blockquote>
<p>HTML代码<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;span <span class="type">class</span>=<span class="string">"block"</span>&gt;块级元素&lt;/span&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>CSS代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.parent</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">600px</span></span><br><span class="line">&#125;</span><br><span class="line">div &#123;</span><br><span class="line">    background: <span class="hexcolor">#eeb3b3</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> auto</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo1.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo1.2.jpg" alt=""></p>
<p>被设置为auto的margin-auto属性值为340px，即margin-left+border-left+padding-left+width+padding-right+border-right+margin-right=340+0+30+100+30+0+100=600</p>
<h6 id="总和不等于父级元素的width">总和不等于父级元素的width</h6><p>使用auto可以弥补实际值与所需总和的差距，如果三个属性都设置了特定值，但是总和不等于父级元素的width。<br>修改上面例子中的margin-left为100px，即<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo2.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo2.2.jpg" alt=""></p>
<p>在上面的CSS中，margin-left，width，margin-right都设置了特定值，但是七大属性总和不等于父级元素的width。这种情况下：<br>在FF中，margin-right的值为开发者设定的值<br>在Chrome中，margin-right被强制为auto</p>
<h6 id="width设置为auto">width设置为auto</h6><p>如果margin-left和margin-right都设置特定值，width设置为auto，则width将会等于某个特定值以达到父级元素的width。<br>如果将width修改为auto，即：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo3.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo3.2.jpg" alt=""></p>
<p>元素的width将被被设定为340px来使总和达到父级元素的width</p>
<h6 id="margin-left和margin-right设置成auto">margin-left和margin-right设置成auto</h6><p>如果margin-left和amrgin-right都设置为auto，则它们会设置相等的值，因此元素将在父级元素中居中。这是将块级元素居中的一种方法。注意：text-align设置为center只适用于块级元素中的内联内容居中，并不能使块级元素居中。<br>设置margin属性为margin:0 auto<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>;    </span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo4.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo4.2.jpg" alt=""><br>margin-left和margin-right的值会被设置为相等，使得元素居中</p>
<h6 id="某个外边距和width设置成auto">某个外边距和width设置成auto</h6><p>如果设置某个外边距和width为auto，则设置为auto的外边距会为0，width会设置为所需的值来填充父级元素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> auto</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo5.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo5.2.jpg" alt=""><br>设置margin-left和width为auto，则margin-left将被设置为0，width会被设置为440px来满足父级元素的width</p>
<h6 id="全设置成auto">全设置成auto</h6><p>如果margin和width都设置为auto，则两个外边距会设置为0，width会尽可能宽。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> auto</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> auto</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo6.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo6.2.jpg" alt=""></p>
<p>三个值都设置为auto，则两个外边距会设置为0，width会被设置为540px</p>
<h6 id="负外边距">负外边距</h6><p>7个属性只要都是大于等于0的值，总和总是等于父级元素的width，不会超过父级元素的区域<br>但是可以通过制定负外边距来得到比父级元素width更大的区域<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.block</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffd800</span> none repeat scroll <span class="number">0</span> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> -<span class="number">400px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo7.1.jpg" alt=""><br><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo7.2.jpg" alt=""></p>
<p>设置margin-right为-400px，则元素会大于父级元素width，因为100+0+30+840+30+0-400=600，元素的width为840px</p>
<h5 id="替换元素的水平格式化">替换元素的水平格式化</h5><p>替换元素的水平格式化规则和非替换元素的规则类似，只有一个width有区别，如果width设置为auto，则元素的宽度是内容的固有宽度。注意：对于img标签，如果width不等于其固有宽度，则height也会等比例增加，除非设置特定值。反过来如果height设置高度，width也会等比例增加</p>
<h4 id="垂直格式化">垂直格式化</h4><p>垂直格式化和水平格式化类似，也有7个相关属性：margin-top，border-top，padding-top，height，padding-bottom，border-bottom，margin-bottom，这7个属性的总和必须等于父级元素的height属性。<br>其中margin-top，margin-bottom和height可以设置成auto<br>一个正常流中的块元素的margin-top和margin-bottom设置为auto后，会被设置为0，即不能将元素垂直居中，实际上元素没有外边距。定位元素如果设置成auto有不同的处理结果。</p>
<p>如果正常流元素的height设置为auto，则其高度将会被设置为其内容元素的高度总和。</p>
<h5 id="垂直外边距合并">垂直外边距合并</h5><p>垂直外边距合并：当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p>
<blockquote>
<p>例子</p>
</blockquote>
<p>html代码<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"m20"</span>&gt; 外边距<span class="number">20</span>px &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"m10"</span>&gt; 外边距<span class="number">10</span>px &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>css代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.m20</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.m10</span> <span class="rules">&#123; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xnjy3.com1.z0.glb.clouddn.com/box-model-demo8.jpg" alt=""><br>如图所示，两个div标签的外边距分别是20px，10px，但是最终两个div之间的距离是20px，而不是20+10=30px</p>
<h4 id="行内元素的盒模型">行内元素的盒模型</h4><p>行内元素也是有盒模型的，但是有几点要注意：<br>1.对于非替换元素，比如a，span标签等<br>（1）可以设置margin-left和margin-right属性，无法设置margin-top和margin-bottom属性<br>（2）行内元素border和padding可以设置，但是border-top和padding-top到页面顶部后就不再增加<br>2.对于替换元素，比如input，img标签<br>margin，padding，border都有效果</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要是学习CSS盒模型的笔记，总结了一些基本概念，知识点和细节。HTML的大多数元素都是块级(block)元素或行内(inline)元素。<br/>块级元素：默认情况下，块级元素会另起一行，并尽可能的充满整个容器。块级元素可以包含行内元素和其他块级元素，相比于行内元素可以创建更复杂和大型的结构。<br/>行内元素：行内元素不会另起一行只占据它对应的标签的边框所包含内容的空间，只能包含数据和其他行内元素。<br/>盒模型：html文档中的每个元素都被描绘成矩形盒子，这些矩形盒子通过一个模型来描述其占用空间，这个模型称为盒模型。盒模型通过四个边界来描述：margin（外边距），border（边框），padding（内边距），content（内容区域）。]]>
    
    </summary>
    
      <category term="CSS" scheme="http://luopq.com/tags/CSS/"/>
    
      <category term="Web前端" scheme="http://luopq.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[蚁人和头脑特工队]]></title>
    <link href="http://luopq.com/2015/10/17/movie-reviews-for-Ant-Man-and-Inside-Out/"/>
    <id>http://luopq.com/2015/10/17/movie-reviews-for-Ant-Man-and-Inside-Out/</id>
    <published>2015-10-17T10:01:02.000Z</published>
    <updated>2015-10-26T13:16:21.673Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;国庆放假后连上了9天班，终于找到机会放松了。看了两部电影，想写点东西</p>
<h4 id="蚁人">蚁人</h4><p>&emsp;&emsp;又一部典型的超级英雄片,落魄的主角如何逆袭成为英雄，但不同于其他英雄，他只是想成为自己女儿心中的英雄。整篇看下来幽默搞笑，又萌又酷的英雄，逗比的配角插科打诨的本事无缝穿插中，最后的结局也很温馨。  </p>
<p>&emsp;&emsp;主角变小后的微观视角很棒，我相信很多人都会想象自己变小后的感受。在浴缸，D厅，下水道，电路板，还有最后的在iphone手机和玩具里的打斗，每个场景都很有想象力。微观视角和正常视角的切换十分自然，充满幽默感。</p>
<p>&emsp;&emsp;除了主角本身充满喜剧效果，三个逗比同伙表现得也很棒，各有特点。不同于其他严肃的英雄导师，发明蚁人盔甲的导师也时不时冒出几句逗乐观众的台词。我喜欢这种有亮点但有不抢镜的配角安排。</p>
<p>&emsp;&emsp;影片中的打斗戏很棒，主角忽大忽小的变换和打斗很酷而且自带萌点和趣味。他没有什么特别具有杀伤力的招数，有的只是普通人的拳头，关键在于怎么灵活运用自己变小的能力来击败对手。</p>
<p>&emsp;&emsp;对于这类标准的美国英雄片，我最不喜欢的大概就是和主角对立的反派总是拥有和主角类似的超能力，而且能力更强大。在前面反派介绍自己黄蜂战衣的时候，大概就能猜出反派是个什么样的人物了。</p>
<p>&emsp;&emsp;总的来说，一部让我喜欢的英雄电影，4星推荐。</p>
<h4 id="头脑特工队">头脑特工队</h4><p>&emsp;&emsp;特别有创意特别有想象力的一部动画片，第一次发现我们的情绪，思维还可以通过这样的形式表现出来。虽然是一部动画片，但感觉这是一部更适合大人看的动画片。</p>
<p>&emsp;&emsp;影片中很有想象力的将我们情绪展现为头脑中住的五个代表不同情绪的小家伙来掌控。由乐乐为领导，控制着整个大脑的运行，努力为小女孩创造更多的美好记忆。在乐乐和忧忧因为意外脱离控制总部，进入大脑运行的世界。脑中世界不同的岛屿代表不同的情感联系，记忆垃圾场，造梦工厂，想象出来的伙伴，记忆清理工，很形象的展示了大脑的运行。</p>
<p>&emsp;&emsp;与其他情绪不同的是，悲伤具有感染记忆的能力，她能让曾经美好的记忆带点忧伤的成分，所以快乐总是在阻止悲伤接触任何东西，甚至画了一个圈来限制悲伤的行动自由，但没有忧伤的情绪显然是不完整的。在脑中世界和忧伤一起经历过各种冒险的领导快乐也知道应该让忧伤去做她适合的工作，让重塑的情感岛屿更具坚固性。</p>
<p>&emsp;&emsp;影片中也展示了爸爸和妈妈脑袋里的五个家伙。爸爸脑袋里领导情绪是愤怒，妈妈里的领导情绪是忧伤，而小女孩的领导情绪是快乐。什么样的情绪主导，整个人表现出来的状态就是怎么样的。随着成长和精力，我们的情绪领导也许会从最初的快乐在进行转变，我们肯定悲伤的价值，但我们应该让快乐成为主导。</p>
<p>&emsp;&emsp;我脑海的的情绪小家伙，又是怎么样的组成呢？</p>
]]></content>
    <summary type="html">
    <![CDATA[国庆放假后连上了9天班，终于找到机会放松了。看了两部电影，想写点东西。]]>
    
    </summary>
    
      <category term="电影" scheme="http://luopq.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="娱乐" scheme="http://luopq.com/categories/%E5%A8%B1%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <link href="http://luopq.com/2015/10/15/learn-markdown/"/>
    <id>http://luopq.com/2015/10/15/learn-markdown/</id>
    <published>2015-10-15T12:10:33.000Z</published>
    <updated>2015-10-26T13:16:21.672Z</updated>
    <content type="html"><![CDATA[<h3 id="基本语法">基本语法</h3><h4 id="标题">标题</h4><p>一级标题： # 一级标题<br>二级标题： ## 二级标题<br>三级标题： ### 三级标题<br>四级标题： #### 四级标题<br>五级标题： ##### 五级标题<br>六级标题： ###### 六级标题</p>
<h4 id="列表">列表</h4><p>无序列表 ：在文字前加上“-”或“*”  </p>
<ul>
<li>1  </li>
<li>2  </li>
<li>3</li>
</ul>
<p>有序列表：直接加上1. 2.  </p>
<ol>
<li>第一项  </li>
<li>第二项  </li>
<li>第三项  </li>
</ol>
<h4 id="引用">引用</h4><p>在文本前面加上 &gt; （大于号）</p>
<blockquote>
<p>这是一段引用文字</p>
</blockquote>
<h4 id="图片和链接">图片和链接</h4><p>图片和链接的区别在于 ! 感叹号</p>
<p>图片：<code>![图片替代文字](图片链接)</code><br>插入图片：<br><img src="http://tp4.sinaimg.cn/1836010911/180/5614933698/1" alt="我的头像"></p>
<p>链接：<code>[链接名称](链接地址)</code><br>插入链接：<a href="luopq.com">我的博客</a></p>
<h4 id="粗体和斜体">粗体和斜体</h4><p>用两个”*“包含就是粗体：<code>**粗体**</code><br><strong>这里是粗体</strong>  </p>
<p>用一个”*“包含就是斜体：<code>*斜体*</code><br><em>这里是斜体</em></p>
<h4 id="表格">表格</h4><pre><code>|<span class="string"> 第一列 </span>|<span class="string"> 第二列 </span>|<span class="string"> 第三列 </span>|
|<span class="string">-------</span>|<span class="string">-------</span>|<span class="string">-------</span>|
|<span class="string">   1   </span>|<span class="string">   2   </span>|<span class="string">   3   </span>|
</code></pre><table>
<thead>
<tr>
<th>第一列</th>
<th>第二列</th>
<th>第三列</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
</tbody>
</table>
<h4 id="代码框">代码框</h4><p>三种方式:  </p>
<ol>
<li>行内代码：使用符号”`“包裹起来，在ESC键下面<br> <code>var a = 0</code>  </li>
<li><p>块代码：使用tab键缩进或空格缩进四个    </p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{
    <span class="built_in">console</span>.log(<span class="string">"test"</span>);
}   
</code></pre></li>
<li><p>前后使用三个”`“将代码包裹起来  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[Markdown的基本语法，只要掌握几个概念就能畅快写字啦]]>
    
    </summary>
    
      <category term="markdown" scheme="http://luopq.com/tags/markdown/"/>
    
  </entry>
  
</feed>
